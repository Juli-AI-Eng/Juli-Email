This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo, **/certdata.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
e2e/
  utils/
    assertions.ts
    config.ts
    httpClient.ts
    interactivePrompt.ts
    llmGrader.ts
    testData.ts
    testLogger.ts
  config.ts
  contactNameResolution.test.ts
  fullRealApiJourney.test.ts
  global.d.ts
  jest.config.js
  onboardingFlow.test.ts
  README.md
  run-e2e-tests.ts
  setup.test.ts
  setup.ts
  toolApprovals.test.ts
integration/
unit/
  ai/
    emailAI.test.ts
  setup/
  tools/
    emailInsights.test.ts
    findEmails.test.ts
    manageEmail.test.ts
    organizeInbox.test.ts
    smartFolders.test.ts
  server.test.ts
  setupManager.test.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="e2e/utils/assertions.ts">
/**
 * Assertion helpers for email verification in E2E tests
 */
import { Email } from '../../../src/types/index';
import { logger } from './testLogger';
/**
 * Email-specific assertions
 */
export class EmailAssertions {
  /**
   * Assert email has expected structure
   */
  static assertValidEmail(email: any, description?: string) {
    if (description) {
      logger.logInfo(`Asserting valid email: ${description}`);
    }
    expect(email).toBeDefined();
    expect(email.id).toBeDefined();
    expect(typeof email.id).toBe('string');
    // Check required fields
    expect(email.from).toBeDefined();
    expect(Array.isArray(email.from)).toBe(true);
    expect(email.from.length).toBeGreaterThan(0);
    if (email.from[0]) {
      expect(email.from[0].email).toBeDefined();
      expect(email.from[0].email).toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
    }
    expect(email.subject).toBeDefined();
    expect(typeof email.subject).toBe('string');
    // Check optional but common fields
    if (email.to) {
      expect(Array.isArray(email.to)).toBe(true);
    }
    if (email.date) {
      expect(typeof email.date).toBe('number');
      expect(email.date).toBeGreaterThan(0);
    }
    logger.logSuccess('Email structure is valid');
  }
  /**
   * Assert email contains test prefix
   */
  static assertIsTestEmail(email: any, testPrefix: string) {
    expect(email.subject).toBeDefined();
    expect(email.subject).toContain(testPrefix);
    logger.logSuccess(`Email is test email with prefix: ${testPrefix}`);
  }
  /**
   * Assert email was sent recently
   */
  static assertRecentEmail(email: any, maxAgeMinutes: number = 5) {
    expect(email.date).toBeDefined();
    const emailDate = new Date(email.date * 1000); // Convert from Unix timestamp
    const now = new Date();
    const ageMinutes = (now.getTime() - emailDate.getTime()) / (1000 * 60);
    expect(ageMinutes).toBeLessThan(maxAgeMinutes);
    logger.logSuccess(`Email is recent (${ageMinutes.toFixed(1)} minutes old)`);
  }
  /**
   * Assert email list response
   */
  static assertEmailListResponse(response: any, minCount?: number) {
    expect(response).toBeDefined();
    expect(response.emails).toBeDefined();
    expect(Array.isArray(response.emails)).toBe(true);
    if (minCount !== undefined) {
      expect(response.emails.length).toBeGreaterThanOrEqual(minCount);
    }
    logger.logSuccess(`Email list contains ${response.emails.length} emails`);
    // Validate each email in the list
    response.emails.forEach((email: any, index: number) => {
      try {
        this.assertValidEmail(email);
      } catch (error) {
        logger.logError(`Invalid email at index ${index}`, error);
        throw error;
      }
    });
  }
}
/**
 * Approval flow assertions
 */
export class ApprovalAssertions {
  /**
   * Assert valid approval request
   */
  static assertApprovalRequired(response: any) {
    expect(response).toBeDefined();
    expect(response.needs_approval).toBe(true);
    expect(response.action_type).toBeDefined();
    expect(response.action_data).toBeDefined();
    expect(response.preview).toBeDefined();
    // Check preview structure
    expect(response.preview.summary).toBeDefined();
    expect(typeof response.preview.summary).toBe('string');
    expect(response.preview.details).toBeDefined();
    logger.logSuccess('Valid approval request structure');
  }
  /**
   * Assert email approval preview
   */
  static assertEmailApprovalPreview(response: any, expectedRecipient?: string) {
    this.assertApprovalRequired(response);
    expect(response.action_type).toBe('send_email');
    expect(response.action_data.email_content).toBeDefined();
    expect(response.action_data.original_params).toBeDefined();
    const preview = response.preview;
    expect(preview.details.to).toBeDefined();
    expect(Array.isArray(preview.details.to)).toBe(true);
    expect(preview.details.subject).toBeDefined();
    expect(preview.details.body).toBeDefined();
    if (expectedRecipient) {
      expect(preview.details.to).toContain(expectedRecipient);
    }
    logger.logSuccess('Valid email approval preview');
  }
}
/**
 * AI response assertions
 */
export class AIAssertions {
  /**
   * Assert AI-generated content
   */
  static assertAIGeneratedContent(content: any, field: string) {
    expect(content).toBeDefined();
    expect(content[field]).toBeDefined();
    expect(typeof content[field]).toBe('string');
    expect(content[field].length).toBeGreaterThan(10); // Meaningful content
    logger.logSuccess(`AI generated valid ${field}`);
  }
  /**
   * Assert email insights response
   */
  static assertEmailInsights(response: any) {
    expect(response).toBeDefined();
    expect(response.insights).toBeDefined();
    // Should have some form of structured insights
    const insights = response.insights;
    const insightKeys = Object.keys(insights);
    expect(insightKeys.length).toBeGreaterThan(0);
    logger.logSuccess(`Generated ${insightKeys.length} insight categories`);
  }
  /**
   * Assert organization plan
   */
  static assertOrganizationPlan(response: any) {
    expect(response).toBeDefined();
    if (response.plan) {
      expect(response.plan).toBeDefined();
      // Should have some organization actions
      if (response.plan.actions) {
        expect(Array.isArray(response.plan.actions)).toBe(true);
        logger.logSuccess(`Organization plan has ${response.plan.actions.length} actions`);
      }
      // Should indicate affected emails
      if (response.plan.total_affected !== undefined) {
        expect(typeof response.plan.total_affected).toBe('number');
        expect(response.plan.total_affected).toBeGreaterThanOrEqual(0);
      }
    }
  }
}
/**
 * Error assertions
 */
export class ErrorAssertions {
  /**
   * Assert missing credentials error
   */
  static assertMissingCredentialsError(response: any) {
    expect(response.error).toBeDefined();
    expect(response.error.toLowerCase()).toContain('missing');
    expect(response.error.toLowerCase()).toContain('credentials');
    logger.logSuccess('Correctly reported missing credentials');
  }
  /**
   * Assert validation error
   */
  static assertValidationError(response: any, expectedField?: string) {
    expect(response.error).toBeDefined();
    expect(response.error.toLowerCase()).toContain('validation');
    if (expectedField) {
      expect(response.error.toLowerCase()).toContain(expectedField.toLowerCase());
    }
    logger.logSuccess('Correctly reported validation error');
  }
}
/**
 * Test data assertions
 */
export class TestDataAssertions {
  /**
   * Assert test email was created with correct prefix
   */
  static assertTestEmailCreated(email: any, testPrefix: string, testRecipient: string) {
    EmailAssertions.assertValidEmail(email);
    EmailAssertions.assertIsTestEmail(email, testPrefix);
    expect(email.to).toBeDefined();
    expect(email.to.some((r: any) => r.email === testRecipient)).toBe(true);
    logger.logSuccess('Test email created correctly');
  }
  /**
   * Assert clean test state
   */
  static async assertNoTestEmails(client: any, testPrefix: string) {
    const response = await client.callTool('find_emails', {
      query: `subject:"${testPrefix}"`,
      limit: 10
    });
    expect(response.result).toBeDefined();
    expect(response.result.emails).toBeDefined();
    expect(response.result.emails.length).toBe(0);
    logger.logSuccess('No test emails found - clean state');
  }
}
// Export all assertion classes
export {
  EmailAssertions as Email,
  ApprovalAssertions as Approval,
  AIAssertions as AI,
  ErrorAssertions as Error,
  TestDataAssertions as TestData
};
</file>

<file path="e2e/utils/config.ts">
/**
 * Configuration for E2E tests
 * Provides test credentials and server configuration
 */
export interface E2EConfig {
  server: {
    url: string;
    port: number;
  };
  nylas?: {
    nylasGrantId: string;
  };
  testTimeout: number;
  logging: {
    verbose: boolean;        // Detailed logging for all operations
    logApiCalls: boolean;    // Log all API requests/responses
    logTimings: boolean;     // Log operation timings
    saveResponses: boolean;  // Save API responses to files
  };
  testData: {
    testEmailPrefix: string; // e.g., "[E2E-TEST]"
    cleanupAfterTest: boolean;
    testRecipientEmail: string; // Your test email
  };
}
// Load configuration from environment variables or use defaults
export const E2E_CONFIG: E2EConfig = {
  server: {
    url: process.env.SERVER_URL || 'http://localhost',
    port: parseInt(process.env.PORT || '3000', 10)
  },
  nylas: process.env.NYLAS_GRANT_ID ? {
    nylasGrantId: process.env.NYLAS_GRANT_ID
  } : undefined,
  testTimeout: parseInt(process.env.TEST_TIMEOUT || '30000', 10),
  logging: {
    verbose: process.env.VERBOSE === 'true' || process.env.LOG_LEVEL === 'verbose',
    logApiCalls: process.env.LOG_API_CALLS === 'true',
    logTimings: process.env.LOG_TIMINGS === 'true',
    saveResponses: process.env.SAVE_RESPONSES === 'true'
  },
  testData: {
    testEmailPrefix: process.env.TEST_PREFIX || '[E2E-TEST]',
    cleanupAfterTest: process.env.CLEANUP !== 'false', // Default true
    testRecipientEmail: process.env.TEST_EMAIL_ADDRESS || ''
  }
};
// Helper to check if E2E tests should run
export function shouldRunE2ETests(): boolean {
  // E2E tests can run with or without Nylas credentials
  // Without credentials, only setup-related tests will work
  return process.env.RUN_E2E_TESTS === 'true' || process.env.CI === 'true';
}
// Helper to check if Nylas integration tests should run
export function hasNylasCredentials(): boolean {
  return !!E2E_CONFIG.nylas?.nylasGrantId;
}
</file>

<file path="e2e/utils/httpClient.ts">
/**
 * HTTP client for E2E testing of the Inbox MCP server
 * Replaces the stdio-based MCP client with HTTP communication
 */
import axios, { AxiosInstance, AxiosResponse, InternalAxiosRequestConfig } from 'axios';
import { logger } from './testLogger';
import * as fs from 'fs';
import * as path from 'path';
export interface HttpClientConfig {
  baseUrl: string;
  port: number;
  credentials?: {
    nylasGrantId?: string;
  };
}
export interface ToolCallResponse {
  success: boolean;
  result?: any;
  error?: {
    code: number;
    message: string;
  };
  needs_approval?: boolean;
  action_type?: string;
  action_data?: any;
  preview?: any;
}
export class HttpTestClient {
  private client: AxiosInstance;
  private credentials?: {
    nylasGrantId?: string;
  };
  constructor(config: HttpClientConfig) {
    this.credentials = config.credentials;
    this.client = axios.create({
      baseURL: `${config.baseUrl}:${config.port}`,
      timeout: 60000, // 60 seconds for AI operations
      headers: {
        'Content-Type': 'application/json'
      }
    });
    // Add request/response interceptors for logging
    this.setupInterceptors();
  }
  private setupInterceptors() {
    // Create log file for HTTP traffic
    const logDir = path.join(process.cwd(), 'tests', 'e2e', 'logs');
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }
    const logFile = path.join(logDir, `http-traffic-${new Date().toISOString().replace(/[:.]/g, '-')}.log`);
    const appendToLog = (content: string) => {
      fs.appendFileSync(logFile, content + '\n');
    };
    // Log file location
    console.log(`\n📝 HTTP traffic log: ${logFile}\n`);
    let requestCounter = 0;
    // Request interceptor
    this.client.interceptors.request.use(
      (config: InternalAxiosRequestConfig) => {
        const method = config.method?.toUpperCase() || 'GET';
        const url = config.url || '';
        const requestId = ++requestCounter;
        const timestamp = new Date().toISOString();
        // Build request log
        let requestLog = `\n========== REQUEST #${requestId} ==========\n`;
        requestLog += `Timestamp: ${timestamp}\n`;
        requestLog += `${method} ${config.baseURL}${url} HTTP/1.1\n`;
        Object.entries(config.headers as any).forEach(([key, value]) => {
          requestLog += `${key}: ${value}\n`;
        });
        if (config.data) {
          requestLog += '\n' + JSON.stringify(config.data, null, 2) + '\n';
        }
        requestLog += '==================================\n';
        // Log to console (abbreviated)
        console.log(`\n--- HTTP REQUEST #${requestId} ---`);
        console.log(`${method} ${config.baseURL}${url}`);
        if (config.data) {
          console.log('Body:', JSON.stringify(config.data).substring(0, 100) + '...');
        }
        // Log to file (full)
        appendToLog(requestLog);
        // Add request ID for response matching
        (config as any).requestId = requestId;
        // Log the request
        logger.logApiCall(method, url, config.data);
        return config;
      },
      (error) => {
        logger.logError('Request failed', error);
        return Promise.reject(error);
      }
    );
    // Response interceptor
    this.client.interceptors.response.use(
      (response: AxiosResponse) => {
        const requestId = (response.config as any).requestId || 'unknown';
        const timestamp = new Date().toISOString();
        // Build response log
        let responseLog = `\n========== RESPONSE #${requestId} ==========\n`;
        responseLog += `Timestamp: ${timestamp}\n`;
        responseLog += `HTTP/1.1 ${response.status} ${response.statusText}\n`;
        Object.entries(response.headers).forEach(([key, value]) => {
          responseLog += `${key}: ${value}\n`;
        });
        responseLog += '\n' + JSON.stringify(response.data, null, 2) + '\n';
        responseLog += '===================================\n';
        // Log to console (abbreviated)
        console.log(`\n--- HTTP RESPONSE #${requestId} ---`);
        console.log(`Status: ${response.status}`);
        if (response.data?.needs_approval) {
          console.log('Needs Approval:', response.data.needs_approval);
          console.log('Action Type:', response.data.action_type);
        } else {
          console.log('Body:', JSON.stringify(response.data).substring(0, 100) + '...');
        }
        // Log to file (full)
        appendToLog(responseLog);
        logger.logApiResponse(response.status, response.data, response.config.url);
        return response;
      },
      (error) => {
        const requestId = (error.config as any)?.requestId || 'unknown';
        const timestamp = new Date().toISOString();
        if (error.response) {
          // Build error response log
          let errorLog = `\n========== ERROR RESPONSE #${requestId} ==========\n`;
          errorLog += `Timestamp: ${timestamp}\n`;
          errorLog += `HTTP/1.1 ${error.response.status} ${error.response.statusText}\n`;
          Object.entries(error.response.headers).forEach(([key, value]) => {
            errorLog += `${key}: ${value}\n`;
          });
          errorLog += '\n' + JSON.stringify(error.response.data, null, 2) + '\n';
          errorLog += '======================================\n';
          // Log to console (abbreviated)
          console.log(`\n--- HTTP ERROR #${requestId} ---`);
          console.log(`Status: ${error.response.status}`);
          console.log('Error:', JSON.stringify(error.response.data).substring(0, 100) + '...');
          // Log to file (full)
          appendToLog(errorLog);
          logger.logApiResponse(error.response.status, error.response.data, error.config?.url);
        } else {
          logger.logError('Response error', error);
        }
        return Promise.reject(error);
      }
    );
  }
  async listTools(): Promise<any> {
    const headers = this.getCredentialHeaders();
    try {
      const response = await this.client.get('/mcp/tools', { headers });
      return response.data;
    } catch (error: any) {
      if (error.response) {
        return error.response.data;
      }
      throw error;
    }
  }
  async callTool(toolName: string, args: any): Promise<ToolCallResponse> {
    // JSON-RPC wrapper for A2A
    const headers = this.getCredentialHeaders();
    const id = Date.now().toString();
    const payload = {
      jsonrpc: '2.0',
      id,
      method: 'tool.execute',
      params: {
        tool: toolName,
        arguments: args,
        user_context: {
          credentials: {
            EMAIL_ACCOUNT_GRANT: this.credentials?.nylasGrantId
          }
        },
        request_id: id
      }
    };
    try {
      const response = await this.client.post(`/a2a/rpc`, payload, { headers });
      const data = response.data;
      if (data?.error) return data;
      return data?.result || data;
    } catch (error: any) {
      if (error.response) {
        return error.response.data;
      }
      throw error;
    }
  }
  private getCredentialHeaders(): Record<string, string> {
    const headers: Record<string, string> = {};
    if (this.credentials?.nylasGrantId) {
      headers['X-User-Credential-NYLAS_GRANT_ID'] = this.credentials.nylasGrantId;
    }
    return headers;
  }
  // Update credentials for testing different user scenarios
  updateCredentials(credentials: HttpClientConfig['credentials']) {
    this.credentials = credentials;
  }
  // Helper method to simulate approval flow
  async approveAction(toolName: string, originalArgs: any, actionData: any): Promise<ToolCallResponse> {
    return this.callTool(toolName, {
      ...originalArgs,
      approved: true,
      action_data: actionData
    });
  }
  // Generic GET method
  async get(path: string): Promise<any> {
    const headers = this.getCredentialHeaders();
    try {
      const response = await this.client.get(path, { headers });
      return response.data;
    } catch (error: any) {
      if (error.response) {
        return error.response.data;
      }
      throw error;
    }
  }
  // Generic POST method
  async post(path: string, data: any = {}): Promise<any> {
    const headers = this.getCredentialHeaders();
    try {
      const response = await this.client.post(path, data, { headers });
      return response.data;
    } catch (error: any) {
      if (error.response) {
        return error.response.data;
      }
      throw error;
    }
  }
  // Health check
  async healthCheck(): Promise<boolean> {
    try {
      const response = await this.client.get('/health');
      return response.status === 200;
    } catch {
      return false;
    }
  }
}
// Helper to start the server for testing
export async function startTestServer(): Promise<{ port: number; stop: () => Promise<void> }> {
  const { spawn } = require('child_process');
  const port = 3000 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
  return new Promise((resolve, reject) => {
    const env = { ...process.env, PORT: port.toString() };
    const serverProcess = spawn('npm', ['run', 'start'], { env });
    let started = false;
    serverProcess.stdout.on('data', (data: Buffer) => {
      const output = data.toString();
      if (process.env.VERBOSE === 'true') {
        console.log('[Server]', output.trim());
      }
      if (output.includes('Inbox MCP HTTP server running') && !started) {
        started = true;
        resolve({
          port,
          stop: async () => {
            serverProcess.kill();
            await new Promise(r => setTimeout(r, 500)); // Wait for cleanup
          }
        });
      }
    });
    serverProcess.stderr.on('data', (data: Buffer) => {
      const error = data.toString();
      // Ignore deprecation warnings
      if (error.includes('DeprecationWarning') || error.includes('DEP0040')) {
        if (process.env.VERBOSE === 'true') {
          console.log('[Server Warning]', error.trim());
        }
        return;
      }
      if (process.env.VERBOSE === 'true' || !started) {
        console.error('[Server Error]', error.trim());
      }
      // Only reject for actual errors, not warnings
      if (!started && !error.includes('Warning')) {
        reject(new Error(`Server failed to start: ${error}`));
      }
    });
    // Timeout if server doesn't start
    setTimeout(() => {
      if (!started) {
        serverProcess.kill();
        reject(new Error('Server failed to start within timeout'));
      }
    }, 10000);
  });
}
// Create a test client with proper configuration
export function createTestClient(config?: Partial<HttpClientConfig>): HttpTestClient {
  return new HttpTestClient({
    baseUrl: 'http://localhost',
    port: 3000,
    ...config
  });
}
</file>

<file path="e2e/utils/interactivePrompt.ts">
import prompts from 'prompts';
import { E2E_CONFIG } from '../config';
export interface ApprovalRequest {
  id: string;
  action: string;
  preview: {
    summary: string;
    details?: any;
    risks?: string[];
  };
  expires_at: number;
  modifications_allowed: boolean;
}
export class InteractivePrompt {
  static async getCredentials(): Promise<{
    nylas_api_key: string;
    nylas_grant_id: string;
    openai_api_key: string;
  }> {
    console.log('\n=== MCP Email Assistant Setup ===\n');
    const response = await prompts([
      {
        type: 'password',
        name: 'nylas_api_key',
        message: 'Enter your Nylas API Key:',
        validate: (value: string) => value.length > 0 || 'API Key is required'
      },
      {
        type: 'text',
        name: 'nylas_grant_id',
        message: 'Enter your Nylas Grant ID:',
        validate: (value: string) => value.length > 0 || 'Grant ID is required'
      },
      {
        type: 'password',
        name: 'openai_api_key',
        message: 'Enter your OpenAI API Key:',
        validate: (value: string) => value.length > 0 || 'OpenAI API Key is required'
      }
    ]);
    return response;
  }
  static async approveAction(approval: ApprovalRequest): Promise<{
    action: 'approve' | 'reject' | 'modify';
    modifications?: any;
  }> {
    if (!E2E_CONFIG.interactive.enabled) {
      console.log('CI Mode: Auto-approving action');
      return { action: 'approve' };
    }
    console.log('\n=== Approval Required ===\n');
    console.log(`Action: ${approval.action}`);
    console.log(`Summary: ${approval.preview.summary}`);
    if (approval.preview.details) {
      console.log('\nDetails:');
      console.log(JSON.stringify(approval.preview.details, null, 2));
    }
    if (approval.preview.risks && approval.preview.risks.length > 0) {
      console.log('\n⚠️  Risks:');
      approval.preview.risks.forEach(risk => console.log(`  - ${risk}`));
    }
    console.log(`\nApproval ID: ${approval.id}`);
    console.log(`Expires: ${new Date(approval.expires_at).toLocaleString()}\n`);
    const choices = [
      { title: 'Approve', value: 'approve' },
      { title: 'Reject', value: 'reject' }
    ];
    if (approval.modifications_allowed) {
      choices.push({ title: 'Modify', value: 'modify' });
    }
    const response = await prompts({
      type: 'select',
      name: 'action',
      message: 'What would you like to do?',
      choices
    });
    if (response.action === 'modify') {
      const modifications = await prompts({
        type: 'text',
        name: 'modifications',
        message: 'Enter modifications as JSON:',
        validate: (value: string) => {
          try {
            JSON.parse(value);
            return true;
          } catch {
            return 'Please enter valid JSON';
          }
        }
      });
      return {
        action: 'modify',
        modifications: JSON.parse(modifications.modifications)
      };
    }
    return { action: response.action };
  }
  static async waitForUserInput(message: string): Promise<void> {
    if (!E2E_CONFIG.interactive.enabled) {
      console.log(`CI Mode: Skipping - ${message}`);
      return;
    }
    await prompts({
      type: 'confirm',
      name: 'continue',
      message,
      initial: true
    });
  }
  static async selectTestScenario(scenarios: string[]): Promise<string> {
    const response = await prompts({
      type: 'select',
      name: 'scenario',
      message: 'Select a test scenario:',
      choices: scenarios.map(s => ({ title: s, value: s }))
    });
    return response.scenario;
  }
  static displayTestResult(testName: string, passed: boolean, details?: string) {
    const status = passed ? '✅ PASSED' : '❌ FAILED';
    console.log(`\n${status}: ${testName}`);
    if (details) {
      console.log(details);
    }
  }
  static displayGradingResult(scores: {
    queryUnderstanding: number;
    actionAccuracy: number;
    responseQuality: number;
    errorHandling: number;
    overall: number;
  }) {
    console.log('\n=== Grading Results ===');
    console.log(`Query Understanding: ${scores.queryUnderstanding}/100`);
    console.log(`Action Accuracy: ${scores.actionAccuracy}/100`);
    console.log(`Response Quality: ${scores.responseQuality}/100`);
    console.log(`Error Handling: ${scores.errorHandling}/100`);
    console.log(`\nOverall Score: ${scores.overall}/100`);
    if (scores.overall >= E2E_CONFIG.grading.excellentScore) {
      console.log('🌟 Excellent!');
    } else if (scores.overall >= E2E_CONFIG.grading.passingScore) {
      console.log('✅ Good');
    } else {
      console.log('❌ Needs Improvement');
    }
  }
}
</file>

<file path="e2e/utils/llmGrader.ts">
import OpenAI from 'openai';
import { E2E_CONFIG } from '../config';
import { TestScenario } from './testData';
export interface GradingResult {
  queryUnderstanding: number;
  actionAccuracy: number;
  responseQuality: number;
  errorHandling: number;
  overall: number;
  feedback: string;
}
export class LLMGrader {
  private openai: OpenAI;
  constructor() {
    this.openai = new OpenAI({
      apiKey: E2E_CONFIG.openai.apiKey
    });
  }
  async gradeResponse(
    scenario: TestScenario,
    actualResponse: string,
    additionalContext?: any
  ): Promise<GradingResult> {
    const prompt = this.buildGradingPrompt(scenario, actualResponse, additionalContext);
    try {
      const completion = await this.openai.chat.completions.create({
        model: E2E_CONFIG.openai.graderModel,
        messages: [
          {
            role: 'system',
            content: `You are a test grader for an email management AI assistant. 
Grade the response based on the criteria provided and return scores from 0-100 for each criterion.
Be fair but strict - the assistant should handle email operations correctly and safely.
Return your response as valid JSON.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        response_format: { type: "json_object" }
      });
      const result = JSON.parse(completion.choices[0].message.content || '{}');
      // Calculate overall score
      const weights = E2E_CONFIG.grading.criteria;
      const overall = Math.round(
        result.queryUnderstanding * weights.queryUnderstanding.weight +
        result.actionAccuracy * weights.actionAccuracy.weight +
        result.responseQuality * weights.responseQuality.weight +
        result.errorHandling * weights.errorHandling.weight
      );
      return {
        queryUnderstanding: result.queryUnderstanding || 0,
        actionAccuracy: result.actionAccuracy || 0,
        responseQuality: result.responseQuality || 0,
        errorHandling: result.errorHandling || 0,
        overall,
        feedback: result.feedback || 'No feedback provided'
      };
    } catch (error) {
      console.error('Grading failed:', error);
      return {
        queryUnderstanding: 0,
        actionAccuracy: 0,
        responseQuality: 0,
        errorHandling: 0,
        overall: 0,
        feedback: `Grading failed: ${error}`
      };
    }
  }
  private buildGradingPrompt(
    scenario: TestScenario,
    actualResponse: string,
    additionalContext?: any
  ): string {
    const criteria = scenario.gradingCriteria || {
      queryUnderstanding: 'Did the system understand the user query correctly?',
      actionAccuracy: 'Were the correct actions taken?',
      responseQuality: 'Was the response helpful and complete?',
      errorHandling: 'Were errors handled appropriately?'
    };
    return `
## Test Scenario: ${scenario.name}
**Description**: ${scenario.description}
**Tool Used**: ${scenario.tool}
**Input**: ${JSON.stringify(scenario.input, null, 2)}
**Expected Behavior**: ${scenario.expectedBehavior}
## Actual Response
${actualResponse}
${additionalContext ? `## Additional Context\n${JSON.stringify(additionalContext, null, 2)}` : ''}
## Grading Criteria
Please grade the response on a scale of 0-100 for each criterion:
1. **Query Understanding** (0-100): ${criteria.queryUnderstanding}
2. **Action Accuracy** (0-100): ${criteria.actionAccuracy}
3. **Response Quality** (0-100): ${criteria.responseQuality}
4. **Error Handling** (0-100): ${criteria.errorHandling}
Return your response as JSON with this structure:
{
  "queryUnderstanding": <score>,
  "actionAccuracy": <score>,
  "responseQuality": <score>,
  "errorHandling": <score>,
  "feedback": "<brief explanation of the scores>"
}
`;
  }
  async gradeEmailOperation(
    operation: string,
    expectedResult: any,
    actualResult: any
  ): Promise<GradingResult> {
    // Simplified grading for specific email operations
    const prompt = `
Grade this email operation:
**Operation**: ${operation}
**Expected Result**: ${JSON.stringify(expectedResult, null, 2)}
**Actual Result**: ${JSON.stringify(actualResult, null, 2)}
Grade based on:
1. Query Understanding: Did the system correctly interpret the request?
2. Action Accuracy: Was the email operation performed correctly?
3. Response Quality: Was the response clear and informative?
4. Error Handling: Were any errors handled appropriately?
Return scores 0-100 for each criterion as JSON.
`;
    try {
      const completion = await this.openai.chat.completions.create({
        model: E2E_CONFIG.openai.graderModel,
        messages: [
          {
            role: 'system',
            content: 'You are grading an email AI assistant. Return scores as JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        response_format: { type: "json_object" }
      });
      const result = JSON.parse(completion.choices[0].message.content || '{}');
      const weights = E2E_CONFIG.grading.criteria;
      const overall = Math.round(
        (result.queryUnderstanding || 0) * weights.queryUnderstanding.weight +
        (result.actionAccuracy || 0) * weights.actionAccuracy.weight +
        (result.responseQuality || 0) * weights.responseQuality.weight +
        (result.errorHandling || 0) * weights.errorHandling.weight
      );
      return {
        queryUnderstanding: result.queryUnderstanding || 0,
        actionAccuracy: result.actionAccuracy || 0,
        responseQuality: result.responseQuality || 0,
        errorHandling: result.errorHandling || 0,
        overall,
        feedback: result.feedback || ''
      };
    } catch (error) {
      return {
        queryUnderstanding: 0,
        actionAccuracy: 0,
        responseQuality: 0,
        errorHandling: 0,
        overall: 0,
        feedback: `Grading failed: ${error}`
      };
    }
  }
}
</file>

<file path="e2e/utils/testData.ts">
import { E2E_CONFIG } from '../config';
export interface TestEmail {
  to: string;
  subject: string;
  body: string;
}
export interface TestScenario {
  name: string;
  description: string;
  tool: string;
  input: any;
  expectedBehavior: string;
  gradingCriteria?: {
    queryUnderstanding: string;
    actionAccuracy: string;
    responseQuality: string;
    errorHandling: string;
  };
}
// Generate unique test email data
export function generateTestEmail(scenario: string): TestEmail {
  const timestamp = Date.now();
  return {
    to: E2E_CONFIG.nylas.testEmail,
    subject: `${E2E_CONFIG.testData.emailPrefix} ${scenario} - ${timestamp}`,
    body: `This is an automated test email for scenario: ${scenario}\n\nTimestamp: ${timestamp}\n\nThis email can be safely deleted.`
  };
}
// Common test scenarios
export const TEST_SCENARIOS: Record<string, TestScenario[]> = {
  manageEmail: [
    {
      name: 'Send simple email',
      description: 'Send a basic email to test address',
      tool: 'manage_email',
      input: {
        action: 'send',
        query: `Send an email to ${E2E_CONFIG.nylas.testEmail} with subject "Test Email" and body "This is a test"`,
        require_approval: false
      },
      expectedBehavior: 'Email should be sent successfully',
      gradingCriteria: {
        queryUnderstanding: 'Correctly identified recipient, subject, and body',
        actionAccuracy: 'Email was actually sent with correct content',
        responseQuality: 'Clear confirmation of sent email',
        errorHandling: 'No errors occurred'
      }
    },
    {
      name: 'Draft complex email',
      description: 'Create a draft with multiple recipients and formatting',
      tool: 'manage_email',
      input: {
        action: 'draft',
        query: `Draft an email to john@example.com and jane@example.com about the quarterly review meeting next Tuesday at 2 PM. Include agenda items: budget review, project updates, and Q4 planning.`
      },
      expectedBehavior: 'Draft should be created with proper formatting',
      gradingCriteria: {
        queryUnderstanding: 'Identified all recipients and meeting details',
        actionAccuracy: 'Draft created with all specified content',
        responseQuality: 'Well-formatted email with clear agenda',
        errorHandling: 'Handled multiple recipients correctly'
      }
    }
  ],
  findEmails: [
    {
      name: 'Find recent emails',
      description: 'Search for emails from the last week',
      tool: 'find_emails',
      input: {
        query: 'Show me all emails from the last 7 days',
        limit: 10
      },
      expectedBehavior: 'Should return recent emails with summaries',
      gradingCriteria: {
        queryUnderstanding: 'Correctly interpreted time range',
        actionAccuracy: 'Returned only emails from last 7 days',
        responseQuality: 'Clear summary of found emails',
        errorHandling: 'Handled empty results gracefully'
      }
    },
    {
      name: 'Find important unread',
      description: 'Search for important unread emails',
      tool: 'find_emails',
      input: {
        query: 'Find unread emails that seem important or urgent',
        analysis_type: 'priority'
      },
      expectedBehavior: 'Should identify and prioritize important emails',
      gradingCriteria: {
        queryUnderstanding: 'Understood importance and unread criteria',
        actionAccuracy: 'Filtered to unread and assessed importance',
        responseQuality: 'Clear prioritization with reasoning',
        errorHandling: 'Handled subjective criteria well'
      }
    }
  ],
  organizeInbox: [
    {
      name: 'Auto-organize inbox',
      description: 'Automatically organize inbox based on AI analysis',
      tool: 'organize_inbox',
      input: {
        instruction: 'organize my emails by importance and archive old newsletters',
        dry_run: true
      },
      expectedBehavior: 'Should provide organization preview without making changes',
      gradingCriteria: {
        queryUnderstanding: 'Understood auto-organization request',
        actionAccuracy: 'Generated sensible organization rules',
        responseQuality: 'Clear preview of proposed changes',
        errorHandling: 'Respected dry_run parameter'
      }
    }
  ],
  emailInsights: [
    {
      name: 'Daily summary',
      description: 'Generate daily email summary',
      tool: 'email_insights',
      input: {
        query: 'summarize my emails today',
        time_period: 'today'
      },
      expectedBehavior: 'Should provide comprehensive daily summary',
      gradingCriteria: {
        queryUnderstanding: 'Generated appropriate daily summary',
        actionAccuracy: 'Included relevant emails from today',
        responseQuality: 'Well-structured and informative summary',
        errorHandling: 'Handled low email volume gracefully'
      }
    }
  ],
  smartFolders: [
    {
      name: 'Create project folder',
      description: 'Create smart folder for project emails',
      tool: 'smart_folders',
      input: {
        query: 'Create a folder called Project Alpha for all emails related to Project Alpha including mentions of alpha, project status, or from the project team',
        folder_name: 'Project Alpha',
        dry_run: true
      },
      expectedBehavior: 'Should create smart folder with appropriate rules',
      gradingCriteria: {
        queryUnderstanding: 'Correctly parsed folder requirements',
        actionAccuracy: 'Generated comprehensive matching rules',
        responseQuality: 'Clear explanation of folder rules',
        errorHandling: 'Validated folder name and rules'
      }
    }
  ]
};
// Cleanup test emails
export async function cleanupTestEmails(nylas: any, grantId: string): Promise<void> {
  try {
    // Search for test emails
    const messages = await nylas.messages.list({
      grantId,
      query: `subject:"${E2E_CONFIG.testData.emailPrefix}"`,
      limit: 100
    });
    // Delete test emails
    for (const message of messages.data || []) {
      try {
        await nylas.messages.destroy({
          grantId,
          messageId: message.id
        });
      } catch (error) {
        console.warn(`Failed to delete test email ${message.id}:`, error);
      }
    }
  } catch (error) {
    console.error('Cleanup failed:', error);
  }
}
</file>

<file path="e2e/utils/testLogger.ts">
/**
 * Enhanced logger for E2E tests with comprehensive output formatting
 */
import { E2E_CONFIG } from './config';
import * as fs from 'fs';
import * as path from 'path';
export class TestLogger {
  private startTime: number = Date.now();
  private operationTimings: Map<string, number> = new Map();
  private responseDir: string;
  constructor() {
    // Create directory for saving responses if enabled
    if (E2E_CONFIG.logging.saveResponses) {
      this.responseDir = path.join(process.cwd(), 'test-responses', new Date().toISOString().split('T')[0]);
      if (!fs.existsSync(this.responseDir)) {
        fs.mkdirSync(this.responseDir, { recursive: true });
      }
    }
  }
  /**
   * Log a section header
   */
  logSection(title: string) {
    const width = 60;
    const padding = Math.max(0, width - title.length - 2);
    const leftPad = Math.floor(padding / 2);
    const rightPad = padding - leftPad;
    console.log('\n' + '═'.repeat(width));
    console.log('═' + ' '.repeat(leftPad) + title + ' '.repeat(rightPad) + '═');
    console.log('═'.repeat(width) + '\n');
  }
  /**
   * Log a numbered step
   */
  logStep(step: number, description: string) {
    console.log(`\n📍 Step ${step}: ${description}`);
    if (E2E_CONFIG.logging.logTimings) {
      this.startOperation(`step_${step}`);
    }
  }
  /**
   * Log an API call
   */
  logApiCall(method: string, endpoint: string, data?: any) {
    if (!E2E_CONFIG.logging.logApiCalls) return;
    console.log(`\n🔄 API Call: ${method} ${endpoint}`);
    if (data && E2E_CONFIG.logging.verbose) {
      console.log('📤 Request Data:');
      this.logData('', data, 2);
    }
  }
  /**
   * Log an API response
   */
  logApiResponse(status: number, data: any, endpoint?: string) {
    if (!E2E_CONFIG.logging.logApiCalls) return;
    const statusEmoji = status >= 200 && status < 300 ? '✅' : '❌';
    console.log(`\n${statusEmoji} API Response: ${status}`);
    if (E2E_CONFIG.logging.verbose && data) {
      console.log('📥 Response Data:');
      this.logData('', data, 2);
    }
    // Save response to file if enabled
    if (E2E_CONFIG.logging.saveResponses && endpoint) {
      const filename = `${Date.now()}_${endpoint.replace(/\//g, '_')}.json`;
      const filepath = path.join(this.responseDir, filename);
      fs.writeFileSync(filepath, JSON.stringify(data, null, 2));
      console.log(`💾 Response saved to: ${filepath}`);
    }
  }
  /**
   * Log a success message
   */
  logSuccess(message: string) {
    console.log(`\n✅ ${message}`);
  }
  /**
   * Log an error message
   */
  logError(message: string, error?: any) {
    console.log(`\n❌ ${message}`);
    if (error) {
      console.error('Error details:', JSON.stringify(error, null, 2));
    }
  }
  /**
   * Log a warning message
   */
  logWarning(message: string) {
    console.log(`\n⚠️  ${message}`);
  }
  /**
   * Log an info message
   */
  logInfo(message: string) {
    console.log(`\nℹ️  ${message}`);
  }
  /**
   * Log data with pretty formatting
   */
  logData(label: string, data: any, indent: number = 0) {
    const prefix = ' '.repeat(indent);
    if (label) {
      console.log(`${prefix}📊 ${label}:`);
    }
    if (typeof data === 'object' && data !== null) {
      const formatted = JSON.stringify(data, null, 2)
        .split('\n')
        .map(line => prefix + '  ' + line)
        .join('\n');
      console.log(formatted);
    } else {
      console.log(`${prefix}  ${data}`);
    }
  }
  /**
   * Start timing an operation
   */
  startOperation(operationName: string) {
    if (E2E_CONFIG.logging.logTimings) {
      this.operationTimings.set(operationName, Date.now());
    }
  }
  /**
   * End timing an operation and log the duration
   */
  endOperation(operationName: string) {
    if (!E2E_CONFIG.logging.logTimings) return;
    const startTime = this.operationTimings.get(operationName);
    if (startTime) {
      const duration = Date.now() - startTime;
      console.log(`⏱️  ${operationName} took ${duration}ms`);
      this.operationTimings.delete(operationName);
    }
  }
  /**
   * Log timing for an async operation
   */
  async timeOperation<T>(operationName: string, operation: () => Promise<T>): Promise<T> {
    this.startOperation(operationName);
    try {
      const result = await operation();
      this.endOperation(operationName);
      return result;
    } catch (error) {
      this.endOperation(operationName);
      throw error;
    }
  }
  /**
   * Log test summary
   */
  logTestSummary(passed: number, failed: number, skipped: number = 0) {
    const total = passed + failed + skipped;
    const duration = ((Date.now() - this.startTime) / 1000).toFixed(2);
    this.logSection('TEST SUMMARY');
    console.log(`Total Tests: ${total}`);
    console.log(`✅ Passed: ${passed}`);
    if (failed > 0) console.log(`❌ Failed: ${failed}`);
    if (skipped > 0) console.log(`⏭️  Skipped: ${skipped}`);
    console.log(`\n⏱️  Total Duration: ${duration}s`);
    if (this.responseDir) {
      console.log(`\n💾 Responses saved to: ${this.responseDir}`);
    }
  }
  /**
   * Create a sub-logger for nested operations
   */
  createSubLogger(prefix: string): SubLogger {
    return new SubLogger(this, prefix);
  }
}
/**
 * Sub-logger for nested operations
 */
class SubLogger {
  constructor(private parent: TestLogger, private prefix: string) {}
  log(message: string) {
    console.log(`  ${this.prefix}: ${message}`);
  }
  logData(label: string, data: any) {
    this.parent.logData(`${this.prefix} - ${label}`, data, 2);
  }
}
// Export a singleton instance for convenience
export const logger = new TestLogger();
</file>

<file path="e2e/config.ts">
export const E2E_CONFIG = {
  // API Configuration
  nylas: {
    grantId: process.env.NYLAS_GRANT_ID!,
    testEmail: process.env.TEST_EMAIL_ADDRESS!
  },
  openai: {
    apiKey: process.env.OPENAI_API_KEY!,
    model: 'gpt-5-mini', // Cheaper model for tests
    graderModel: 'gpt-5-mini'
  },
  // Test Configuration
  timeouts: {
    default: 30000,
    approval: 60000,
    setup: 120000
  },
  // Grading Thresholds (0-100)
  grading: {
    passingScore: 70,
    excellentScore: 90,
    criteria: {
      queryUnderstanding: { weight: 0.3 },
      actionAccuracy: { weight: 0.3 },
      responseQuality: { weight: 0.2 },
      errorHandling: { weight: 0.2 }
    }
  },
  // Interactive Mode
  interactive: {
    enabled: process.env.CI !== 'true',
    approvalTimeout: 30000
  },
  // Test Data
  testData: {
    emailPrefix: '[E2E Test]',
    cleanupAfterTests: true
  }
};
</file>

<file path="e2e/contactNameResolution.test.ts">
/**
 * E2E test for contact name resolution in email sending
 * Tests the ability to send emails using contact names instead of email addresses
 * 
 * IMPORTANT: These tests use require_approval: true to ensure no actual emails are sent
 */
import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';
import { HttpTestClient, startTestServer } from './utils/httpClient';
import { E2E_CONFIG, hasNylasCredentials } from './utils/config';
import { logger } from './utils/testLogger';
import * as dotenv from 'dotenv';
// Load environment variables
dotenv.config();
// Skip tests if real APIs are not configured
const SKIP_REAL_API = !hasNylasCredentials() || !process.env.OPENAI_API_KEY;
const testSuite = SKIP_REAL_API ? describe.skip : describe;
testSuite('Contact Name Resolution E2E', () => {
  let client: HttpTestClient;
  let server: { port: number; stop: () => Promise<void> };
  beforeAll(async () => {
    logger.logSection('CONTACT NAME RESOLUTION TEST INITIALIZATION');
    logger.logWarning('⚠️  All tests use require_approval: true to prevent sending actual emails');
    // Validate environment
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY is required for real API tests');
    }
    if (!E2E_CONFIG.nylas) {
      throw new Error('Nylas credentials are required (NYLAS_GRANT_ID)');
    }
    logger.logSuccess('Environment validated');
    // Start test server
    logger.logInfo('Starting test server...');
    server = await startTestServer();
    // Create test client
    client = new HttpTestClient({
      baseUrl: E2E_CONFIG.server.url,
      port: server.port,
      credentials: {
        nylasGrantId: E2E_CONFIG.nylas.nylasGrantId
      }
    });
    logger.logSuccess(`Test server started on port ${server.port}`);
  }, 60000);
  afterAll(async () => {
    logger.logSection('TEST CLEANUP');
    if (server) {
      await server.stop();
      logger.logSuccess('Test server stopped');
    }
  });
  describe('Email Send with Contact Names (Approval Only)', () => {
    test('should resolve contact name to email address when creating draft', async () => {
      logger.logStep(1, 'Test creating draft using contact name');
      // Use draft action instead of send to be extra safe
      const draftResponse = await client.callTool('manage_email', {
        action: 'draft',
        query: `create a draft email to diego about the quarterly report`,
        require_approval: false // Drafts don't need approval
      });
      logger.logApiResponse(200, draftResponse);
      // If it finds a Diego, it will create a draft with his email
      // If not, it will return a contact_not_found error
      if (draftResponse.result?.success) {
        logger.logSuccess('Draft created with resolved contact');
      } else if (draftResponse.result?.error === 'contact_not_found') {
        logger.logInfo('No Diego found in contacts - this is expected if no such contact exists');
        expect(draftResponse.result.message.toLowerCase()).toContain('could not find email addresses for: diego');
      }
    });
    test('should handle non-existent contact gracefully', async () => {
      logger.logStep(1, 'Test handling non-existent contact');
      // Use a very unlikely name
      const nonExistentName = 'Zxqwerty' + Date.now();
      const response = await client.callTool('manage_email', {
        action: 'send',
        query: `send an email to ${nonExistentName} about the project`,
        require_approval: true // This ensures no email is actually sent
      });
      logger.logApiResponse(200, response);
      // Should get an error response
      expect(response.result?.success).toBe(false);
      expect(response.result?.error).toBe('contact_not_found');
      expect(response.result?.message.toLowerCase()).toContain(`could not find email addresses for: ${nonExistentName.toLowerCase()}`);
      expect(response.result?.suggestions).toBeInstanceOf(Array);
      logger.logSuccess('Non-existent contact handled correctly');
    });
    test('should work with full email addresses as before', async () => {
      logger.logStep(1, 'Test with full email address');
      // Use a safe test email that won't send to a real person
      const testEmail = 'test.user.' + Date.now() + '@example.com';
      const response = await client.callTool('manage_email', {
        action: 'send',
        query: `send an email to ${testEmail} saying this is a test with full email address`,
        require_approval: true // This ensures no email is actually sent
      });
      logger.logApiResponse(200, response);
      // Should create approval request
      expect(response.result?.needs_approval).toBe(true);
      expect(response.result?.action_data?.email_content?.to).toContain(testEmail);
      logger.logSuccess('Full email address works correctly (approval created, not sent)');
    });
    test('should validate contact resolution in approval preview', async () => {
      logger.logStep(1, 'Test approval preview shows resolved emails');
      // Try with a common first name that might exist
      const commonName = 'andrew';
      const response = await client.callTool('manage_email', {
        action: 'send',
        query: `send an email to ${commonName} about the team meeting`,
        require_approval: true // This ensures no email is actually sent
      });
      logger.logApiResponse(200, response);
      if (response.result?.needs_approval) {
        // Check that the approval preview shows the resolved email, not just the name
        const preview = response.result.preview;
        expect(preview.details.to).toBeDefined();
        expect(preview.details.to[0]).toContain('@'); // Should be an email address
        logger.logSuccess(`Name "${commonName}" resolved to email in approval preview`);
      } else if (response.result?.error === 'contact_not_found') {
        logger.logInfo(`No contact named "${commonName}" found - this is expected`);
        expect(response.result.suggestions).toContain('Use the full email address (e.g., sarah@example.com)');
      }
    });
    test('should handle multiple name matches safely', async () => {
      logger.logStep(1, 'Create test scenario with common name');
      // Use a very common name that might have multiple matches
      const response = await client.callTool('manage_email', {
        action: 'draft', // Use draft to be extra safe
        query: `draft an email to michael about the budget review`
      });
      logger.logApiResponse(200, response);
      // The system should either:
      // 1. Find no Michaels and return contact_not_found
      // 2. Find one Michael and create a draft
      // 3. Find multiple Michaels and pick the first one (logging a warning)
      if (response.result?.success) {
        logger.logInfo('Draft created - system found and selected a Michael');
      } else if (response.result?.error === 'contact_not_found') {
        logger.logInfo('No Michael found in contacts');
      }
      // Either way, no email was sent
      logger.logSuccess('Multiple name scenario handled safely');
    });
  });
});
</file>

<file path="e2e/fullRealApiJourney.test.ts">
/**
 * Full real API journey test for Inbox MCP
 * Tests complete user flow with real Nylas and OpenAI APIs
 */
import { describe, test, expect, beforeAll, afterAll, beforeEach, afterEach } from '@jest/globals';
import { HttpTestClient, startTestServer } from './utils/httpClient';
import { E2E_CONFIG, hasNylasCredentials } from './utils/config';
import { logger } from './utils/testLogger';
import * as dotenv from 'dotenv';
// Load environment variables from standard .env
dotenv.config();
// Skip tests if real APIs are not configured
const SKIP_REAL_API = !hasNylasCredentials() || !process.env.OPENAI_API_KEY;
const testSuite = SKIP_REAL_API ? describe.skip : describe;
testSuite('Full Real API Journey', () => {
  let client: HttpTestClient;
  let server: { port: number; stop: () => Promise<void> };
  let testEmailIds: string[] = [];
  beforeAll(async () => {
    logger.logSection('TEST SUITE INITIALIZATION');
    // Validate environment
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY is required for real API tests');
    }
    if (!E2E_CONFIG.nylas) {
      throw new Error('Nylas credentials are required (NYLAS_GRANT_ID)');
    }
    if (!E2E_CONFIG.testData.testRecipientEmail) {
      throw new Error('TEST_EMAIL_ADDRESS is required for sending test emails');
    }
    logger.logSuccess('Environment validated');
    logger.logData('Test Configuration', {
      hasNylasCredentials: hasNylasCredentials(),
      hasOpenAIKey: !!process.env.OPENAI_API_KEY,
      testEmailRecipient: E2E_CONFIG.testData.testRecipientEmail,
      testPrefix: E2E_CONFIG.testData.testEmailPrefix,
      cleanupEnabled: E2E_CONFIG.testData.cleanupAfterTest
    });
    // Start test server
    logger.logInfo('Starting test server...');
    server = await logger.timeOperation('server_startup', async () => {
      return await startTestServer();
    });
    // Create test client
    client = new HttpTestClient({
      baseUrl: E2E_CONFIG.server.url,
      port: server.port,
      credentials: {
        nylasGrantId: E2E_CONFIG.nylas.nylasGrantId
      }
    });
    logger.logSuccess(`Test server started on port ${server.port}`);
  }, 60000);
  afterAll(async () => {
    logger.logSection('TEST SUITE CLEANUP');
    if (E2E_CONFIG.testData.cleanupAfterTest && testEmailIds.length > 0) {
      logger.logInfo(`Cleaning up ${testEmailIds.length} test emails...`);
      // TODO: Implement cleanup logic
    }
    if (server) {
      await server.stop();
      logger.logSuccess('Test server stopped');
    }
    logger.logTestSummary(0, 0, 0); // Will be updated by Jest
  });
  beforeEach(() => {
    logger.startOperation('test_case');
  });
  afterEach(() => {
    logger.endOperation('test_case');
  });
  describe('Onboarding Flow', () => {
    test('should list tools with credentials', async () => {
      logger.logStep(1, 'List available tools with credentials');
      const response = await logger.timeOperation('list_tools', async () => {
        logger.logApiCall('GET', '/mcp/tools');
        const result = await client.listTools();
        logger.logApiResponse(200, result);
        return result;
      });
      expect(response.tools).toBeDefined();
      expect(response.tools.length).toBeGreaterThan(0);
      const toolNames = response.tools.map((t: any) => t.name);
      logger.logData('Available Tools', toolNames);
      // Should have all email tools available when credentials are present
      expect(toolNames).toContain('manage_email');
      expect(toolNames).toContain('find_emails');
      expect(toolNames).toContain('email_insights');
      expect(toolNames).toContain('organize_inbox');
      expect(toolNames).toContain('smart_folders');
      logger.logSuccess('All email tools available with credentials');
    });
    test.skip('should validate existing credentials - setup is separate endpoint', async () => {
      logger.logStep(2, 'Validate Nylas credentials');
      const response = await logger.timeOperation('validate_credentials', async () => {
        logger.logApiCall('POST', '/setup/validate', {
          nylas_api_key: 'server_env_key',
          nylas_grant_id: E2E_CONFIG.nylas!.nylasGrantId
        });
        const result = await client.post('/setup/validate', {
          nylas_api_key: 'server_env_key',
          nylas_grant_id: E2E_CONFIG.nylas!.nylasGrantId
        });
        logger.logApiResponse(200, result);
        return result;
      });
      expect(response.result).toBeDefined();
      // Handle expired or invalid credentials gracefully
      if (response.result.type !== 'setup_success') {
        logger.logError('Validation failed:', response.result);
        if (response.result.type === 'setup_error') {
          if (response.result.message.includes('Grant ID not found')) {
            logger.logWarning('Grant ID not found - it may have expired (test grants expire after 30 days)');
            logger.logInfo('To fix: Create a new test grant in your Nylas dashboard and update .env');
            return; // Skip the test
          } else if (response.result.message.includes('Invalid API key')) {
            logger.logWarning('API key is invalid - please check your Nylas dashboard');
            logger.logInfo('To fix: Verify your API key in the Nylas dashboard and update .env');
            return; // Skip the test
          }
        }
      }
      expect(response.result.type).toBe('setup_success');
      expect(response.result.credentials_validated).toBe(true);
      logger.logData('Validation Result', response.result);
      logger.logSuccess('Credentials validated successfully');
    });
  });
  describe('Email Operations with Real Inbox', () => {
    test('should find emails using natural language with AI analysis', async () => {
      logger.logStep(3, 'Find emails using natural language query');
      const query = 'emails from the last 24 hours';
      logger.logInfo(`Query: "${query}"`);
      const response = await logger.timeOperation('find_emails', async () => {
        logger.logApiCall('POST', '/mcp/tools/find_emails', {
          query,
          analysis_type: 'full',
          limit: 10
        });
        const result = await client.callTool('find_emails', {
          query,
          analysis_type: 'full',
          limit: 10
        });
        logger.logApiResponse(200, result);
        return result;
      });
      expect(response.result).toBeDefined();
      expect(response.result.emails).toBeDefined();
      expect(Array.isArray(response.result.emails)).toBe(true);
      logger.logData('Found Emails Count', response.result.emails.length);
      if (response.result.emails.length > 0) {
        logger.logData('First Email', {
          from: response.result.emails[0].from,
          subject: response.result.emails[0].subject,
          date: response.result.emails[0].date
        });
      }
      if (response.result.summary) {
        logger.logData('AI Summary', response.result.summary);
      }
      logger.logSuccess(`Found ${response.result.emails.length} emails with AI analysis`);
    });
    test('should send email with approval flow', async () => {
      logger.logStep(4, 'Send email with natural language and approval');
      const query = `send a test email to ${E2E_CONFIG.testData.testRecipientEmail} saying this is an automated test from Inbox MCP`;
      logger.logInfo(`Query: "${query}"`);
      // Step 1: Initial request that should require approval
      logger.logInfo('Step 4a: Initial email request');
      const initialResponse = await logger.timeOperation('initial_email_request', async () => {
        logger.logApiCall('POST', '/mcp/tools/manage_email', {
          action: 'send',
          query,
          require_approval: true
        });
        const result = await client.callTool('manage_email', {
          action: 'send',
          query,
          require_approval: true
        });
        logger.logApiResponse(200, result);
        return result;
      });
      expect(initialResponse.result).toBeDefined();
      expect(initialResponse.result.needs_approval).toBe(true);
      expect(initialResponse.result.action_type).toBe('send_email');
      expect(initialResponse.result.action_data).toBeDefined();
      expect(initialResponse.result.preview).toBeDefined();
      logger.logData('Approval Preview', initialResponse.result.preview);
      logger.logSuccess('Email generated and requires approval');
      // Step 2: Approve and send the email
      logger.logInfo('Step 4b: Approve and send email');
      const approvalResponse = await logger.timeOperation('approve_email_send', async () => {
        logger.logApiCall('POST', '/mcp/tools/manage_email', {
          ...initialResponse.result.action_data.original_params,
          approved: true,
          action_data: initialResponse.result.action_data
        });
        const result = await client.approveAction(
          'manage_email',
          initialResponse.result.action_data.original_params,
          initialResponse.result.action_data
        );
        logger.logApiResponse(200, result);
        return result;
      });
      expect(approvalResponse.result).toBeDefined();
      expect(approvalResponse.result.success).toBe(true);
      expect(approvalResponse.result.message_id).toBeDefined();
      expect(approvalResponse.result.approval_executed).toBe(true);
      // Track for cleanup
      if (approvalResponse.result.message_id) {
        testEmailIds.push(approvalResponse.result.message_id);
      }
      logger.logData('Send Result', {
        message_id: approvalResponse.result.message_id,
        success: approvalResponse.result.success
      });
      logger.logSuccess('Email sent successfully after approval');
    });
  });
  describe('AI-Powered Features', () => {
    test('should generate email insights', async () => {
      logger.logStep(5, 'Generate AI-powered email insights');
      const response = await logger.timeOperation('email_insights', async () => {
        logger.logApiCall('POST', '/mcp/tools/email_insights', {
          query: 'summarize my emails today',
          time_period: 'today'
        });
        const result = await client.callTool('email_insights', {
          query: 'summarize my emails today',
          time_period: 'today'
        });
        logger.logApiResponse(200, result);
        return result;
      });
      expect(response.result).toBeDefined();
      expect(response.result.insights).toBeDefined();
      logger.logData('Insights', response.result.insights);
      logger.logSuccess('Generated email insights using AI');
    });
    test('should analyze inbox organization with dry run', async () => {
      logger.logStep(6, 'Analyze inbox organization (dry run)');
      const response = await logger.timeOperation('organize_analysis', async () => {
        logger.logApiCall('POST', '/mcp/tools/organize_inbox', {
          instruction: 'organize my emails by importance and archive old newsletters',
          dry_run: true
        });
        const result = await client.callTool('organize_inbox', {
          instruction: 'organize my emails by importance and archive old newsletters',
          dry_run: true
        });
        logger.logApiResponse(200, result);
        return result;
      });
      expect(response.result).toBeDefined();
      if (response.result.organization_plan) {
        logger.logData('Organization Plan', response.result.organization_plan);
        logger.logInfo(`Would affect ${response.result.total_actions || 0} emails`);
      }
      logger.logSuccess('Generated inbox organization plan');
    });
  });
  describe('Error Handling', () => {
    test('should handle missing credentials gracefully', async () => {
      logger.logStep(7, 'Test missing credentials error handling');
      // Create client without credentials
      const noCredClient = new HttpTestClient({
        baseUrl: E2E_CONFIG.server.url,
        port: server.port
      });
      const response = await logger.timeOperation('missing_credentials_test', async () => {
        logger.logApiCall('POST', '/mcp/tools/manage_email', {
          action: 'send',
          query: 'test email'
        });
        const result = await noCredClient.callTool('manage_email', {
          action: 'send',
          query: 'test email'
        });
        logger.logApiResponse(401, result);
        return result;
      });
      expect(response.error).toBeDefined();
      expect(response.error).toContain('Missing Nylas credentials');
      logger.logWarning('Correctly handled missing credentials');
    });
    test('should handle invalid tool gracefully', async () => {
      logger.logStep(8, 'Test invalid tool error handling');
      const response = await logger.timeOperation('invalid_tool_test', async () => {
        logger.logApiCall('POST', '/mcp/tools/invalid_tool', {});
        const result = await client.callTool('invalid_tool', {});
        logger.logApiResponse(404, result);
        return result;
      });
      expect(response.error).toBeDefined();
      expect(response.error).toContain('Unknown tool');
      logger.logWarning('Correctly handled invalid tool');
    });
  });
});
</file>

<file path="e2e/global.d.ts">
declare global {
  var testHelpers: {
    waitForUser: (message: string) => Promise<void>;
  };
}
export {};
</file>

<file path="e2e/jest.config.js">
export default {
  preset: 'ts-jest',
  testEnvironment: 'node',
  rootDir: '../..',
  testMatch: ['<rootDir>/tests/e2e/**/*.test.ts'],
  testTimeout: 60000, // 60 seconds for E2E tests
  transform: {
    '^.+\\.tsx?$': ['ts-jest', {
      useESM: true,
    }],
  },
  extensionsToTreatAsEsm: ['.ts'],
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1',
  },
  transformIgnorePatterns: [
    'node_modules/(?!(node-fetch)/)'
  ],
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.d.ts',
    '!src/**/*.test.ts'
  ],
  coverageDirectory: 'coverage/e2e',
  setupFilesAfterEnv: ['<rootDir>/tests/e2e/setup.ts']
};
</file>

<file path="e2e/onboardingFlow.test.ts">
/**
 * Onboarding flow test for new users
 * Tests the complete setup experience without existing credentials
 */
import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';
import { HttpTestClient, startTestServer } from './utils/httpClient';
import { E2E_CONFIG } from './utils/config';
import { logger } from './utils/testLogger';
import * as dotenv from 'dotenv';
// Load environment variables
dotenv.config();
describe('Onboarding Flow - New User Experience', () => {
  let client: HttpTestClient;
  let server: { port: number; stop: () => Promise<void> };
  beforeAll(async () => {
    logger.logSection('ONBOARDING TEST INITIALIZATION');
    // Start server
    server = await startTestServer();
    // Create client WITHOUT credentials to simulate new user
    client = new HttpTestClient({
      baseUrl: E2E_CONFIG.server.url,
      port: server.port
      // No credentials provided
    });
    logger.logSuccess(`Test server started on port ${server.port}`);
  }, 30000);
  afterAll(async () => {
    if (server) {
      await server.stop();
    }
  });
  describe('Initial Connection - No Credentials', () => {
    test.skip('should list only setup tool when no credentials provided', async () => {
      // SKIPPED: Setup is now a separate endpoint, not a tool
      logger.logStep(1, 'List tools without credentials');
      const response = await client.listTools();
      expect(response.tools).toBeDefined();
      expect(response.tools.length).toBeGreaterThan(0);
      const toolNames = response.tools.map((t: any) => t.name);
      logger.logData('Available Tools', toolNames);
      // Should have setup tool
      expect(toolNames).toContain('setup');
      // Should NOT have email tools without credentials
      expect(toolNames).not.toContain('manage_email');
      expect(toolNames).not.toContain('find_emails');
      logger.logSuccess('Only setup tool available - correct behavior');
    });
    test('should fail gracefully when trying to use email tools without setup', async () => {
      logger.logStep(2, 'Try to use email tool without credentials');
      const response = await client.callTool('manage_email', {
        action: 'send',
        query: 'test email'
      });
      // JSON-RPC error shape or method result wrapper
      if (response?.error) {
        expect(response.error).toBeDefined();
      } else {
        // Some clients unwrap to { request_id, error: ... }
        expect(response?.request_id || true).toBeDefined();
        expect(response?.error || '').toBeDefined();
      }
      logger.logSuccess('Correctly rejected email operation without credentials');
    });
  });
  describe.skip('Setup Tool - Guided Onboarding', () => {
    // SKIPPED: Setup is now a separate endpoint, not a tool
    test('should provide setup instructions', async () => {
      logger.logStep(3, 'Get setup instructions');
      const response = await client.callTool('setup', {
        action: 'start'
      });
      expect(response.result).toBeDefined();
      expect(response.result.type).toBe('setup_instructions');
      expect(response.result.steps).toBeDefined();
      expect(Array.isArray(response.result.steps)).toBe(true);
      expect(response.result.steps.length).toBeGreaterThan(0);
      logger.logData('Setup Steps', response.result.steps.map((s: any) => ({
        step: s.step,
        title: s.title
      })));
      // Verify instructions structure
      const firstStep = response.result.steps[0];
      expect(firstStep.title).toBeDefined();
      expect(firstStep.description).toBeDefined();
      expect(firstStep.actions).toBeDefined();
      logger.logSuccess('Received comprehensive setup instructions');
    });
    test('should validate credential format', async () => {
      logger.logStep(4, 'Test credential validation with invalid format');
      // Test with invalid API key format
      const response = await client.callTool('setup', {
        action: 'validate',
        credentials: {
          nylas_api_key: 'invalid-key-format',
          nylas_grant_id: '12345678-1234-1234-1234-123456789012'
        }
      });
      expect(response.result).toBeDefined();
      expect(response.result.type).toBe('validation_error');
      expect(response.result.message).toContain('API key should start with');
      logger.logSuccess('Correctly validated API key format');
    });
    test('should validate grant ID format', async () => {
      logger.logStep(5, 'Test grant ID validation');
      const response = await client.callTool('setup', {
        action: 'validate',
        credentials: {
          nylas_api_key: 'nyk_valid_format_key',
          nylas_grant_id: 'not-a-uuid'
        }
      });
      expect(response.result).toBeDefined();
      expect(response.result.type).toBe('validation_error');
      expect(response.result.message).toContain('valid UUID');
      logger.logSuccess('Correctly validated grant ID format');
    });
    // Only run this test if we have real credentials to test with
    if (E2E_CONFIG.nylas) {
      test('should successfully validate real credentials', async () => {
        logger.logStep(6, 'Validate real credentials');
        // Debug: Log what credentials we're using
        logger.logData('Testing with credentials', {
          grantId: E2E_CONFIG.nylas.nylasGrantId
        });
        const response = await client.post('/setup/validate', {
          nylas_api_key: 'server_env_key',
          nylas_grant_id: E2E_CONFIG.nylas.nylasGrantId
        });
        expect(response.result).toBeDefined();
        // Log the actual response for debugging
        if (response.result.type !== 'setup_success') {
          logger.logError('Validation failed:', response.result);
          // Handle expired or invalid credentials gracefully
          if (response.result.type === 'setup_error') {
            if (response.result.message.includes('Grant ID not found')) {
              logger.logWarning('Grant ID not found - it may have expired (test grants expire after 30 days)');
              logger.logInfo('To fix: Create a new test grant in your Nylas dashboard and update .env');
              return; // Skip the test
            } else if (response.result.message.includes('Invalid API key')) {
              logger.logWarning('API key is invalid - please check your Nylas dashboard');
              logger.logInfo('To fix: Verify your API key in the Nylas dashboard and update .env');
              return; // Skip the test
            }
          }
        }
        expect(response.type).toBeDefined();
        if (response.result.email) {
          logger.logData('Connected Email', response.result.email);
        }
        logger.logSuccess('Real credentials validated successfully');
      });
    }
  });
  describe('Post-Setup Experience', () => {
    test('should have all tools available after adding credentials', async () => {
      logger.logStep(7, 'Verify tools available after setup');
      // Skip if no real credentials
      if (!E2E_CONFIG.nylas) {
        logger.logWarning('Skipping - no real credentials available');
        return;
      }
      // Create new client with credentials
      const authenticatedClient = new HttpTestClient({
        baseUrl: E2E_CONFIG.server.url,
        port: server.port,
        credentials: {
          nylasGrantId: E2E_CONFIG.nylas.nylasGrantId
        }
      });
      const response = await authenticatedClient.listTools();
      const toolNames = response.tools.map((t: any) => t.name);
      // Should now have all email tools
      expect(toolNames).toContain('manage_email');
      expect(toolNames).toContain('find_emails');
      expect(toolNames).toContain('email_insights');
      expect(toolNames).toContain('organize_inbox');
      expect(toolNames).toContain('smart_folders');
      logger.logSuccess('All email tools now available after setup');
    });
  });
  describe('Error Scenarios', () => {
    test('should handle network errors gracefully', async () => {
      logger.logStep(8, 'Test network error handling');
      // Create client pointing to wrong port
      const badClient = new HttpTestClient({
        baseUrl: E2E_CONFIG.server.url,
        port: 99999 // Invalid port
      });
      try {
        await badClient.listTools();
        expect(true).toBe(false); // Should not reach here
      } catch (error: any) {
        expect(error).toBeDefined();
        logger.logSuccess('Network error handled correctly');
      }
    });
    test.skip('should provide helpful error for missing credentials', async () => {
      // SKIPPED: Setup is now a separate endpoint, not a tool
      logger.logStep(9, 'Test missing credential fields');
      const response = await client.callTool('setup', {
        action: 'validate',
        credentials: {
          // Missing both fields
        }
      });
      expect(response.result).toBeDefined();
      expect(response.result.type).toBe('validation_error');
      expect(response.result.missing_fields).toBeDefined();
      expect(response.result.missing_fields).toContain('nylas_api_key');
      expect(response.result.missing_fields).toContain('nylas_grant_id');
      logger.logSuccess('Correctly identified missing fields');
    });
  });
});
</file>

<file path="e2e/README.md">
# End-to-End Testing Documentation

This directory contains comprehensive end-to-end tests for the Inbox MCP email assistant. These tests validate real functionality using actual OpenAI and Nylas APIs.

## 🚀 Quick Start

### 1. Set Up Test Credentials

Copy the example environment file and add your test credentials:

```bash
cp .env.test.example .env.test
```

Edit `.env.test` with:
- `NYLAS_GRANT_ID`: Your Nylas grant ID (from Hosted Auth callback)
- `OPENAI_API_KEY`: Your OpenAI API key
- `TEST_EMAIL_ADDRESS`: An email address accessible via Nylas

⚠️ **Important**: Use a test email account to avoid affecting production data!

### 2. Build the Project

```bash
npm run build
```

### 3. Run E2E Tests

```bash
# Run all E2E tests
npm run test:e2e

# Run specific test suite
npm run test:e2e setup.test.ts

# Run in interactive mode (with user prompts)
npm run test:e2e:interactive

# Run in watch mode for development
npm run test:e2e:watch
```

## 📁 Test Structure

### Test Suites

1. **setup.test.ts** - User onboarding and configuration
   - Initial setup flow
   - Credential validation
   - Tool availability verification
   - Nylas connection testing

2. **aiTools.test.ts** - AI-powered email tools
   - ManageEmail: Send, reply, forward, draft
   - FindEmails: Natural language search
   - OrganizeInbox: Smart organization
   - EmailInsights: Analytics and summaries
   - SmartFolders: AI-generated folder rules

3. **approval.test.ts** - Human-in-the-loop workflows
   - Approval request generation
   - Interactive approval/rejection
   - Modification handling
   - Edge cases (expired, rapid cycles)

4. **mcpServer.test.ts** - MCP protocol compliance
   - JSON-RPC 2.0 compliance
   - Tool registration and discovery
   - Error handling
   - Concurrent request handling

5. **complexScenarios.test.ts** - Real-world workflows
   - Multi-step email conversations
   - Email triage and organization
   - Error recovery
   - Performance testing
   - Monday morning routine simulation

### Utilities

- **testClient.ts**: MCP client for simulating Juli's interactions
- **llmGrader.ts**: Simple OpenAI-based response grader
- **interactivePrompt.ts**: Terminal prompts for user interaction
- **testData.ts**: Test scenarios and data generation
- **config.ts**: Test configuration and thresholds

## 🎯 Testing Approach

### LLM Grading

Tests use a simple LLM grader that evaluates responses on four criteria:

1. **Query Understanding** (30%): Did the AI understand the request?
2. **Action Accuracy** (30%): Were the correct actions taken?
3. **Response Quality** (20%): Is the response helpful and complete?
4. **Error Handling** (20%): Were errors handled gracefully?

Passing score: 70/100
Excellent score: 90/100

### Interactive Testing

Some tests support interactive mode where you can:
- Review and approve email operations
- Enter custom test queries
- See real-time results
- Simulate user workflows

Run with `npm run test:e2e:interactive` to enable prompts.

### Test Data Management

- Test emails are prefixed with `[E2E Test]`
- Automatic cleanup after tests (configurable)
- Isolated test operations using dry_run mode

## 🔧 Configuration

Edit `tests/e2e/config.ts` to adjust:

- API credentials and endpoints
- Timeout values
- Grading thresholds
- Interactive mode settings
- Test data preferences

## 📊 CI/CD Integration

For continuous integration:

1. Set environment variables in CI:
   ```
   NYLAS_GRANT_ID=<test_grant>
   OPENAI_API_KEY=<api_key>
   TEST_EMAIL_ADDRESS=<test_email>
   CI=true
   ```

2. Run tests in CI mode (skips interactive prompts):
   ```bash
   CI=true npm run test:e2e
   ```

## 🐛 Troubleshooting

### Common Issues

1. **"Missing required test environment variables"**
   - Ensure `.env.test` exists with all required variables
   - Check that credentials are valid

2. **"Request timeout" errors**
   - Increase timeouts in `config.ts`
   - Check network connectivity
   - Verify API endpoints are accessible

3. **"No emails found" in tests**
   - Ensure test email account has some emails
   - Check Nylas grant permissions
   - Verify email sync is working

4. **Low grading scores**
   - Review the grading feedback
   - Check if AI responses match expectations
   - Adjust grading criteria if needed

### Debug Mode

Set `NODE_ENV=development` for verbose logging:
```bash
NODE_ENV=development npm run test:e2e
```

## 🤝 Contributing

When adding new E2E tests:

1. Follow the existing test structure
2. Use meaningful test descriptions
3. Include grading criteria for AI responses
4. Add both automated and interactive variants
5. Document any new test utilities
6. Ensure tests are idempotent

## 📝 Test Writing Guidelines

### Good E2E Test Example

```typescript
it('should handle natural language email search', async () => {
  // Clear description of what we're testing
  const scenario = {
    name: 'Email search with time context',
    tool: 'find_emails',
    input: { query: 'Find important emails from last week' },
    expectedBehavior: 'Returns relevant recent emails',
    gradingCriteria: {
      queryUnderstanding: 'Correctly interprets time range and importance',
      actionAccuracy: 'Filters to last 7 days and assesses importance',
      responseQuality: 'Provides useful email summaries',
      errorHandling: 'Handles empty results gracefully'
    }
  };
  
  // Execute the test
  const response = await client.callTool(scenario.tool, scenario.input);
  const result = extractResponseText(response);
  
  // Grade with LLM
  const grade = await grader.gradeResponse(scenario, result);
  
  // Display results
  InteractivePrompt.displayGradingResult(grade);
  
  // Assert minimum quality
  expect(grade.overall).toBeGreaterThanOrEqual(70);
});
```

## 🔒 Security Notes

- Never commit `.env.test` files
- Use dedicated test accounts
- Avoid testing with production data
- Regularly rotate test credentials
- Monitor API usage and costs
</file>

<file path="e2e/run-e2e-tests.ts">
#!/usr/bin/env node
/**
 * E2E test runner with environment validation
 * Ensures all required APIs and configurations are present
 */
import * as dotenv from 'dotenv';
import { spawn } from 'child_process';
import { logger } from './utils/testLogger';
// Load standard environment
dotenv.config();
// Environment validation
interface ValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
}
function validateEnvironment(): ValidationResult {
  const result: ValidationResult = {
    valid: true,
    errors: [],
    warnings: []
  };
  // Check OpenAI API key
  if (!process.env.OPENAI_API_KEY) {
    result.errors.push('OPENAI_API_KEY is not set. Required for AI features.');
    result.valid = false;
  } else if (process.env.OPENAI_API_KEY.length < 20) {
    result.errors.push('OPENAI_API_KEY appears to be invalid (too short).');
    result.valid = false;
  }
  // Check Nylas credentials (grant only; API key is server env)
  if (!process.env.NYLAS_GRANT_ID) {
    result.warnings.push('Nylas grant not found. Only setup tests will run.');
    result.warnings.push('Set NYLAS_GRANT_ID to run full tests.');
  } else {
    // Basic UUID validation for grant ID
    const uuidRegex = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    if (!uuidRegex.test(process.env.NYLAS_GRANT_ID)) {
      result.errors.push('NYLAS_GRANT_ID should be a valid UUID');
      result.valid = false;
    }
  }
  // Check test email
  if (!process.env.TEST_EMAIL_ADDRESS) {
    result.warnings.push('TEST_EMAIL_ADDRESS not set. Email sending tests will use fallback.');
  } else {
    // Basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(process.env.TEST_EMAIL_ADDRESS)) {
      result.errors.push('TEST_EMAIL_ADDRESS is not a valid email format');
      result.valid = false;
    }
  }
  // Check optional settings
  if (process.env.VERBOSE === 'true') {
    result.warnings.push('Verbose logging is enabled. Output will be detailed.');
  }
  if (process.env.SAVE_RESPONSES === 'true') {
    result.warnings.push('Response saving is enabled. Check test-responses/ directory.');
  }
  return result;
}
function printEnvironmentSummary() {
  logger.logSection('E2E Test Environment Summary');
  console.log('API Keys:');
  console.log(`  ✓ OpenAI API Key: ${process.env.OPENAI_API_KEY ? 'Set' : '✗ Missing'}`);
  console.log('\nNylas Configuration:');
  console.log(`  ${process.env.NYLAS_GRANT_ID ? '✓' : '✗'} Grant ID: ${process.env.NYLAS_GRANT_ID ? 'Set' : 'Missing'
    }`);
  console.log('\nTest Configuration:');
  console.log(`  Test Email: ${process.env.TEST_EMAIL_ADDRESS || 'Not set'}`);
  console.log(`  Test Prefix: ${process.env.TEST_PREFIX || '[E2E-TEST]'}`);
  console.log(`  Cleanup After Test: ${process.env.CLEANUP !== 'false' ? 'Yes' : 'No'}`);
  console.log('\nLogging Configuration:');
  console.log(`  Verbose: ${process.env.VERBOSE === 'true' ? 'Yes' : 'No'}`);
  console.log(`  Log API Calls: ${process.env.LOG_API_CALLS === 'true' ? 'Yes' : 'No'}`);
  console.log(`  Log Timings: ${process.env.LOG_TIMINGS === 'true' ? 'Yes' : 'No'}`);
  console.log(`  Save Responses: ${process.env.SAVE_RESPONSES === 'true' ? 'Yes' : 'No'}`);
}
function runTests(testPattern?: string): Promise<number> {
  return new Promise((resolve) => {
    const args = ['test:e2e'];
    if (testPattern) {
      args.push('--', testPattern);
    }
    const child = spawn('npm', ['run', ...args], {
      stdio: 'inherit',
      env: {
        ...process.env,
        RUN_E2E_TESTS: 'true'
      }
    });
    child.on('exit', (code) => {
      resolve(code || 0);
    });
  });
}
async function main() {
  logger.logSection('Inbox MCP E2E Test Runner');
  // Validate environment
  const validation = validateEnvironment();
  // Show environment summary
  printEnvironmentSummary();
  // Display validation results
  if (validation.errors.length > 0) {
    logger.logSection('Environment Validation Errors');
    validation.errors.forEach(error => logger.logError(error));
  }
  if (validation.warnings.length > 0) {
    logger.logSection('Environment Warnings');
    validation.warnings.forEach(warning => logger.logWarning(warning));
  }
  if (!validation.valid) {
    logger.logError('\nEnvironment validation failed. Please fix the errors above.');
    logger.logInfo('Copy .env.test.example to .env.test and fill in your credentials.');
    process.exit(1);
  }
  // Check for test pattern argument
  const testPattern = process.argv[2];
  logger.logSection('Running E2E Tests');
  if (testPattern) {
    logger.logInfo(`Running tests matching pattern: ${testPattern}`);
  } else {
    logger.logInfo('Running all E2E tests...');
  }
  try {
    const exitCode = await runTests(testPattern);
    if (exitCode === 0) {
      logger.logSuccess('\nAll tests passed! 🎉');
    } else {
      logger.logError(`\nTests failed with exit code ${exitCode}`);
    }
    process.exit(exitCode);
  } catch (error) {
    logger.logError('Failed to run tests', error);
    process.exit(1);
  }
}
// Handle uncaught errors
process.on('unhandledRejection', (error) => {
  logger.logError('Unhandled rejection:', error);
  process.exit(1);
});
// Run the test runner
main();
</file>

<file path="e2e/setup.test.ts">
import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';
import { HttpTestClient, startTestServer, createTestClient } from './utils/httpClient';
import { E2E_CONFIG, hasNylasCredentials } from './utils/config';
import Nylas from 'nylas';
describe('Setup and Onboarding E2E Tests', () => {
  let server: { port: number; stop: () => Promise<void> };
  let client: HttpTestClient;
  beforeAll(async () => {
    if (process.env.USE_EXISTING_SERVER !== 'true') {
      server = await startTestServer();
      E2E_CONFIG.server.port = server.port;
    }
    client = createTestClient({
      port: E2E_CONFIG.server.port,
      credentials: E2E_CONFIG.nylas
    });
  });
  afterAll(async () => {
    if (server) {
      await server.stop();
    }
  });
  describe('Initial Setup Flow', () => {
    it('should indicate setup is needed when not configured', async () => {
      // Create a client without credentials
      const setupClient = createTestClient({
        port: E2E_CONFIG.server.port
        // No credentials provided
      });
      // Check if setup is needed
      const needsSetupResponse = await setupClient.get('/mcp/needs-setup');
      expect(needsSetupResponse.needs_setup).toBe(true);
      expect(needsSetupResponse.has_credentials).toBe(false);
      expect(needsSetupResponse.setup_url).toBe('/setup/instructions');
    });
    it('should provide detailed setup instructions', async () => {
      const setupClient = createTestClient({
        port: E2E_CONFIG.server.port
      });
      // Get setup instructions
      const response = await setupClient.get('/setup/instructions');
      expect(response.type).toBe('setup_instructions');
      expect(response.steps).toHaveLength(3);
      // Verify step structure
      const firstStep = response.steps[0];
      expect(firstStep.title).toContain('Nylas Account');
      expect(firstStep.action).toBeDefined();
      // Verify next action
      expect(response.next_action).toBeDefined();
      expect(response.next_action.endpoint).toBe('POST /setup/validate');
    });
    it('should validate credential format', async () => {
      const setupClient = createTestClient({
        port: E2E_CONFIG.server.port
      });
      // Test invalid API key format
      const invalidResponse = await setupClient.post('/setup/validate', {
        nylas_api_key: 'invalid_key',
        nylas_grant_id: '12345678-1234-1234-1234-123456789012'
      });
      expect(invalidResponse.type).toBe('validation_error');
      expect(invalidResponse.message).toContain('API key should start with');
    });
    it('should handle missing credentials', async () => {
      const setupClient = createTestClient({
        port: E2E_CONFIG.server.port
      });
      // Test missing credentials
      const response = await setupClient.post('/setup/validate', {});
      expect(response.success).toBe(false);
      expect(response.error).toContain('Missing required credentials');
    });
  });
  describe('Credential Validation', () => {
    it('should validate credentials if provided', async () => {
      if (!hasNylasCredentials()) {
        console.log('Skipping credential validation - no Nylas credentials provided');
        return;
      }
      const response = await client.post('/setup/validate', {
        nylas_api_key: 'server_env_key',
        nylas_grant_id: E2E_CONFIG.nylas!.nylasGrantId
      });
      if (response.type === 'setup_success') {
        expect(response.credentials_validated).toBe(true);
        expect(response.message).toContain('Successfully connected');
      } else {
        // If credentials are invalid, should get appropriate error
        expect(['setup_error', 'validation_error']).toContain(response.type);
      }
    });
  });
  describe('Tool Availability Based on Setup', () => {
    it('should show all tools when properly configured', async () => {
      if (!hasNylasCredentials()) {
        console.log('Skipping tool availability test - no Nylas credentials provided');
        return;
      }
      const response = await client.listTools();
      expect(response.tools).toBeDefined();
      expect(response.tools.length).toBeGreaterThan(0);
      // Should have email tools available
      const emailTools = ['manage_email', 'find_emails', 'organize_inbox', 'email_insights', 'smart_folders'];
      emailTools.forEach(toolName => {
        const tool = response.tools.find((t: any) => t.name === toolName);
        expect(tool).toBeDefined();
      });
    });
    it('should show no tools when not configured', async () => {
      const unconfiguredClient = createTestClient({
        port: E2E_CONFIG.server.port
        // No credentials
      });
      const response = await unconfiguredClient.listTools();
      expect(response.tools).toBeDefined();
      expect(response.tools.length).toBe(0); // No MCP tools without credentials
      // Setup is not an MCP tool - it's a separate endpoint
      const setupTool = response.tools.find((t: any) => t.name === 'setup_email_connection');
      expect(setupTool).toBeUndefined();
    });
  });
});
</file>

<file path="e2e/setup.ts">
import dotenv from 'dotenv';
// Load environment variables from standard .env
dotenv.config();
// Only require OpenAI API key - Nylas credentials are optional
const requiredVars = ['OPENAI_API_KEY'];
const optionalVars = ['NYLAS_GRANT_ID', 'TEST_EMAIL_ADDRESS'];
const missing = requiredVars.filter(v => !process.env[v]);
if (missing.length > 0) {
  console.error('Missing required environment variables:', missing);
  console.error('Please add them to your .env file');
  process.exit(1);
}
// Log optional variables status
const missingOptional = optionalVars.filter(v => !process.env[v]);
if (missingOptional.length > 0) {
  console.log('Note: Some optional variables are not set:', missingOptional);
  console.log('Some tests will be skipped');
}
// Set longer timeout for E2E tests
jest.setTimeout(60000);
// Global test helpers
global.testHelpers = {
  waitForUser: async (message: string) => {
    if (process.env.CI === 'true') {
      console.log(`CI Mode: Skipping user interaction - ${message}`);
      return;
    }
    console.log(`\n${message}\nPress Enter to continue...`);
    await new Promise(resolve => {
      process.stdin.once('data', resolve);
    });
  }
};
</file>

<file path="e2e/toolApprovals.test.ts">
import { HttpTestClient, createTestClient, startTestServer } from './utils/httpClient';
import { TestLogger } from './utils/testLogger';
import { E2E_CONFIG } from './config';
import { hasNylasCredentials } from './utils/config';
const SKIP = !hasNylasCredentials() || !process.env.OPENAI_API_KEY;
const suite = SKIP ? describe.skip : describe;
suite('Tool Approval Flows', () => {
  let client: HttpTestClient;
  let server: { port: number; stop: () => Promise<void> };
  const logger = new TestLogger();
  // Track created resources for cleanup
  const testEmailIds: string[] = [];
  const testFolderIds: string[] = [];
  beforeAll(async () => {
    logger.logSection('TEST SUITE INITIALIZATION');
    // Validate environment
    const hasCredentials = !!E2E_CONFIG.nylas.grantId;
    if (!hasCredentials) return; // suite is skipped when missing
    // Start test server
    logger.logInfo('Starting test server...');
    server = await startTestServer();
    // Create test client with credentials
    client = createTestClient({
      port: server.port,
      credentials: {
        nylasGrantId: E2E_CONFIG.nylas.grantId
      }
    });
    logger.logSuccess(`Test server started on port ${server.port}`);
  }, 30000);
  afterAll(async () => {
    logger.logSection('CLEANUP');
    // Cleanup test emails
    if (testEmailIds.length > 0 && E2E_CONFIG.testData.cleanupAfterTests) {
      logger.logInfo(`Cleaning up ${testEmailIds.length} test emails...`);
      // Note: Nylas doesn't have a direct delete API, emails would be cleaned via inbox rules
    }
    // Stop server
    if (server) {
      await server.stop();
      logger.logSuccess('Test server stopped');
    }
  });
  describe('manage_email approval flow', () => {
    test('should require approval for sending email', async () => {
      logger.logStep(1, 'Test manage_email approval flow');
      // Step 1: Initial request that should require approval
      const initialResponse = await client.callTool('manage_email', {
        action: 'send',
        query: `Send an email to ${E2E_CONFIG.nylas.testEmail} with subject "${E2E_CONFIG.testData.emailPrefix} Approval Test" saying "This is a test of the approval system"`
      });
      // Verify approval is required
      expect(initialResponse.result.needs_approval).toBe(true);
      expect(initialResponse.result.action_type).toBe('send_email');
      expect(initialResponse.result.action_data).toBeDefined();
      expect(initialResponse.result.preview).toBeDefined();
      expect(initialResponse.result.preview.summary).toContain(E2E_CONFIG.nylas.testEmail);
      logger.logSuccess('Email send requires approval as expected');
      logger.logData('Approval Preview', initialResponse.result.preview, 2);
      // Step 2: Execute with approval
      const approvalResponse = await client.approveAction(
        'manage_email',
        initialResponse.result.action_data.original_params,
        initialResponse.result.action_data
      );
      expect(approvalResponse.result.success).toBe(true);
      expect(approvalResponse.result.message_id).toBeDefined();
      if (approvalResponse.result?.message_id) {
        testEmailIds.push(approvalResponse.result.message_id);
      }
      logger.logSuccess('Email sent successfully after approval');
    }, 60000);
    test('should skip approval when require_approval is false', async () => {
      logger.logStep(2, 'Test manage_email without approval');
      const response = await client.callTool('manage_email', {
        action: 'send',
        query: `Send an email to ${E2E_CONFIG.nylas.testEmail} with subject "${E2E_CONFIG.testData.emailPrefix} No Approval Test"`,
        require_approval: false
      });
      // Should send directly without approval
      expect(response.result.needs_approval).toBeUndefined();
      expect(response.result.success).toBe(true);
      expect(response.result.message_id).toBeDefined();
      if (response.result?.message_id) {
        testEmailIds.push(response.result.message_id);
      }
      logger.logSuccess('Email sent directly without approval');
    }, 60000);
  });
  describe('organize_inbox approval flow', () => {
    test('should require approval for inbox organization', async () => {
      logger.logStep(3, 'Test organize_inbox approval flow');
      // Step 1: Initial request with dry_run=false should require approval
      const initialResponse = await client.callTool('organize_inbox', {
        instruction: 'Archive all emails older than 30 days that are not starred',
        scope: {
          folder: 'inbox',
          limit: 10
        },
        dry_run: false
      });
      // Verify response - may not need approval if no actions to take
      if (initialResponse.result.needs_approval) {
        expect(initialResponse.result.action_type).toBe('organize_inbox');
        expect(initialResponse.result.action_data).toBeDefined();
        expect(initialResponse.result.preview).toBeDefined();
        expect(initialResponse.result.preview.summary).toBeDefined();
      } else {
        // No emails matched the criteria
        expect(initialResponse.result.total_actions).toBe(0);
      }
      if (initialResponse.result.needs_approval) {
        logger.logSuccess('Inbox organization requires approval as expected');
        logger.logData('Organization Preview', initialResponse.result.preview, 2);
      } else {
        logger.logInfo('No emails matched organization criteria');
      }
      // Note: We won't execute the approval in tests to avoid modifying real inbox
      logger.logInfo('Skipping actual execution to preserve inbox state');
    }, 60000);
    test('should return preview only when dry_run is true', async () => {
      logger.logStep(4, 'Test organize_inbox dry run');
      const response = await client.callTool('organize_inbox', {
        instruction: 'Move all newsletters to a Newsletter folder',
        scope: {
          folder: 'inbox',
          limit: 20
        },
        dry_run: true
      });
      // Should return preview without requiring approval
      expect(response.result.needs_approval).toBeUndefined();
      expect(response.result).toBeDefined();
      expect(response.result.preview_actions).toBeDefined();
      expect(response.result.total_actions).toBeDefined();
      logger.logSuccess('Dry run returned preview without approval');
      logger.logData('Dry Run Results', {
        total_actions: response.result.total_actions || 0,
        summary: response.result.summary
      }, 2);
    }, 60000);
  });
  describe('smart_folders approval flow', () => {
    test('should require approval for applying smart folder rules', async () => {
      logger.logStep(5, 'Test smart_folders approval flow');
      // First create a smart folder rule with unique name
      const uniqueFolderName = `${E2E_CONFIG.testData.emailPrefix} Test Smart Folder ${Date.now()}`;
      const createResponse = await client.callTool('smart_folders', {
        query: 'Create a folder for important client emails from domains like @important-client.com',
        folder_name: uniqueFolderName
      });
      // Handle both success and conflict cases
      if (createResponse.error) {
        // If folder already exists, that's okay for this test
        logger.logInfo(`Folder creation failed (may already exist): ${createResponse.error}`);
        // Try to list existing folders instead
        const listResponse = await client.callTool('smart_folders', {
          query: 'show me all my smart folders'
        });
        expect(listResponse.result.smart_folders).toBeDefined();
      } else {
        expect(createResponse.result.success).toBe(true);
        expect(createResponse.result.folder_id).toBeDefined();
        if (createResponse.result?.folder_id) {
          testFolderIds.push(createResponse.result.folder_id);
        }
      }
      // Step 2: Apply the folder with dry_run=false should require approval
      const applyResponse = await client.callTool('smart_folders', {
        query: `Apply the "${uniqueFolderName}" rules`,
        dry_run: false
      });
      // Handle both cases: approval required (emails to move) or no emails to move
      if (applyResponse.result.needs_approval) {
        // Case 1: There are emails to move, approval required
        expect(applyResponse.result.action_type).toBe('apply_smart_folder');
        expect(applyResponse.result.action_data).toBeDefined();
        expect(applyResponse.result.preview).toBeDefined();
        logger.logSuccess('Smart folder application requires approval as expected');
        logger.logData('Smart Folder Preview', applyResponse.result.preview, 2);
      } else if (applyResponse.result.success && applyResponse.result.preview) {
        // Case 2: No emails match the criteria, so no approval needed
        expect(applyResponse.result.preview.total_count).toBe(0);
        logger.logInfo('No emails matched smart folder criteria, approval not required');
        logger.logData('Smart Folder Preview', applyResponse.result.preview, 2);
      } else {
        // Unexpected response
        throw new Error(`Unexpected response: ${JSON.stringify(applyResponse)}`);
      }
      // Note: We won't execute the approval in tests to avoid moving real emails
      logger.logInfo('Test completed - preserving inbox state');
    }, 60000);
    test('should return preview when listing smart folders', async () => {
      logger.logStep(6, 'Test smart_folders list action');
      const response = await client.callTool('smart_folders', {
        query: 'show me all my smart folders'
      });
      // List action should not require approval
      expect(response.result.needs_approval).toBeUndefined();
      expect(response.result.smart_folders).toBeDefined();
      expect(Array.isArray(response.result.smart_folders)).toBe(true);
      logger.logSuccess('Listed smart folders without approval');
      logger.logData('Smart Folders', {
        count: response.result.smart_folders.length,
        folders: response.result.smart_folders.map((f: any) => f.name)
      }, 2);
    }, 60000);
  });
  describe('Approval edge cases', () => {
    test('should handle approval with missing action_data', async () => {
      logger.logStep(7, 'Test approval with invalid data');
      const response = await client.callTool('manage_email', {
        action: 'send',
        query: 'test',
        approved: true,
        // Missing action_data
      });
      // When approved is true but action_data is missing, it processes as a new request
      // and returns needs_approval instead of executing
      expect(response.result).toBeDefined();
      expect(response.result.needs_approval).toBe(true);
      expect(response.result.action_type).toBe('send_email');
      logger.logSuccess('Properly handled missing action_data by requiring approval');
    });
    test('should handle approval with minimal but valid action_data', async () => {
      logger.logStep(8, 'Test approval with minimal action_data');
      // Test with minimal but valid action_data
      const response = await client.callTool('manage_email', {
        action: 'send',
        query: 'test',
        approved: true,
        action_data: {
          email_content: {
            to: [E2E_CONFIG.nylas.testEmail],
            subject: `${E2E_CONFIG.testData.emailPrefix} Minimal Test`,
            body: 'Test email with minimal data'
          },
          original_params: {
            action: 'send',
            query: 'test'
          }
        }
      });
      // With valid action_data, the email should be sent successfully
      expect(response.result?.success).toBe(true);
      expect(response.result?.message_id).toBeDefined();
      if (response.result?.message_id) {
        testEmailIds.push(response.result.message_id);
      }
      logger.logSuccess('Successfully handled approval with minimal data');
    });
  });
});
</file>

<file path="unit/ai/emailAI.test.ts">
import { describe, it, expect, jest, beforeEach } from '@jest/globals';
import { EmailAI } from '../../../src/ai/emailAI';
import { EmailIntent, EmailAnalysis, GeneratedEmail } from '../../../src/types';
import OpenAI from 'openai';
// Mock OpenAI
jest.mock('openai');
describe('EmailAI', () => {
  let emailAI: EmailAI;
  let mockCreate: jest.Mock<any>;
  let originalEnv: string | undefined;
  beforeEach(() => {
    jest.clearAllMocks();
    // Save original env var
    originalEnv = process.env.OPENAI_API_KEY;
    // Set test API key
    process.env.OPENAI_API_KEY = 'test-api-key';
    mockCreate = jest.fn();
    // Mock the OpenAI constructor to return our mock
    (OpenAI as any).mockImplementation(() => ({
      chat: {
        completions: {
          create: mockCreate
        }
      }
    }));
    emailAI = new EmailAI();
  });
  afterEach(() => {
    // Restore original env var
    if (originalEnv !== undefined) {
      process.env.OPENAI_API_KEY = originalEnv;
    } else {
      delete process.env.OPENAI_API_KEY;
    }
  });
  describe('understandQuery', () => {
    it('should parse a simple send email request', async () => {
      const query = 'send an email to john@example.com about the meeting tomorrow';
      // Mock OpenAI response with function calling
      const mockResponse = {
        choices: [{
          message: {
            tool_calls: [{
              function: {
                name: 'extract_email_intent',
                arguments: JSON.stringify({
                  intent: 'send',
                  recipients: ['john@example.com'],
                  subject: 'Meeting Tomorrow',
                  key_points: ['meeting scheduled for tomorrow'],
                  urgency: 'normal',
                  tone: 'professional'
                })
              }
            }]
          }
        }]
      };
      mockCreate.mockResolvedValue(mockResponse);
      const result = await emailAI.understandQuery(query);
      expect(result).toEqual({
        intent: 'send',
        recipients: ['john@example.com'],
        subject: 'Meeting Tomorrow',
        key_points: ['meeting scheduled for tomorrow'],
        urgency: 'normal',
        tone: 'professional'
      });
    });
    it('should parse a reply request with context', async () => {
      const query = 'reply to Sarah thanking her for the proposal';
      const context = { senderEmail: 'sarah@company.com' };
      const mockResponse = {
        choices: [{
          message: {
            tool_calls: [{
              function: {
                name: 'extract_email_intent',
                arguments: JSON.stringify({
                  intent: 'reply',
                  recipients: [],
                  subject: 'Re: Proposal',
                  key_points: ['thank you for the proposal'],
                  urgency: 'normal',
                  tone: 'grateful'
                })
              }
            }]
          }
        }]
      };
      mockCreate.mockResolvedValue(mockResponse);
      const result = await emailAI.understandQuery(query, context);
      expect(result.intent).toBe('reply');
      expect(result.recipients).toContain('sarah@company.com');
      expect(result.key_points).toContain('thank you for the proposal');
    });
  });
  describe('generateEmailContent', () => {
    it('should generate email content from intent', async () => {
      const intent: EmailIntent = {
        intent: 'send',
        recipients: ['client@example.com'],
        subject: 'Project Update',
        key_points: ['project on track', 'delivery next week'],
        urgency: 'normal',
        tone: 'professional'
      };
      const mockResponse = {
        choices: [{
          message: {
            tool_calls: [{
              function: {
                name: 'generate_email',
                arguments: JSON.stringify({
                  to: ['client@example.com'],
                  cc: null,
                  bcc: null,
                  subject: 'Project Update - On Track for Next Week',
                  body: 'Dear Client,\n\nI wanted to update you on our project progress...',
                  tone_confirmation: 'professional'
                })
              }
            }]
          }
        }]
      };
      mockCreate.mockResolvedValue(mockResponse);
      const result = await emailAI.generateEmailContent(intent);
      expect(result.to).toEqual(['client@example.com']);
      expect(result.subject).toBe('Project Update - On Track for Next Week');
      expect(result.body).toContain('project progress');
    });
  });
  describe('analyzeEmailImportance', () => {
    it('should analyze importance of multiple emails', async () => {
      const emails = [
        {
          id: '1',
          subject: 'URGENT: Server down',
          from: [{ email: 'alerts@company.com' }],
          snippet: 'Production server is experiencing downtime'
        },
        {
          id: '2',
          subject: 'Newsletter',
          from: [{ email: 'news@example.com' }],
          snippet: 'Check out our latest blog posts'
        }
      ];
      const mockResponse = {
        choices: [{
          message: {
            tool_calls: [{
              function: {
                name: 'analyze_emails',
                arguments: JSON.stringify({
                  analyses: [
                    {
                      email_id: '1',
                      importance_score: 0.95,
                      category: 'urgent_alert',
                      reason: 'Production server issue requiring immediate attention',
                      action_required: true,
                      suggested_folder: null
                    },
                    {
                      email_id: '2',
                      importance_score: 0.2,
                      category: 'newsletter',
                      reason: 'Promotional content, no action required',
                      action_required: false,
                      suggested_folder: null
                    }
                  ]
                })
              }
            }]
          }
        }]
      };
      mockCreate.mockResolvedValue(mockResponse);
      const result = await emailAI.analyzeEmailImportance(emails);
      expect(result).toHaveLength(2);
      expect(result[0].importance_score).toBeGreaterThan(0.9);
      expect(result[1].importance_score).toBeLessThan(0.3);
    });
  });
  describe('extractActionItems', () => {
    it('should extract action items from an email', async () => {
      const email = {
        id: '123',
        subject: 'Project Tasks',
        body: 'Please review the design by Friday and send feedback. Also schedule a meeting for next week.',
        from: [{ email: 'manager@company.com' }]
      };
      const mockResponse = {
        choices: [{
          message: {
            tool_calls: [{
              function: {
                name: 'extract_action_items',
                arguments: JSON.stringify({
                  action_items: [
                    {
                      task: 'Review design',
                      deadline: 'Friday',
                      priority: 'high'
                    },
                    {
                      task: 'Send feedback on design',
                      deadline: 'Friday',
                      priority: 'high'
                    },
                    {
                      task: 'Schedule meeting',
                      deadline: 'Next week',
                      priority: 'medium'
                    }
                  ]
                })
              }
            }]
          }
        }]
      };
      mockCreate.mockResolvedValue(mockResponse);
      const result = await emailAI.extractActionItems(email);
      expect(result).toHaveLength(3);
      expect(result[0].task).toBe('Review design');
      expect(result[0].deadline).toBe('Friday');
    });
  });
});
</file>

<file path="unit/tools/emailInsights.test.ts">
import { describe, it, expect, jest, beforeEach } from '@jest/globals';
import { EmailInsightsTool } from '../../../src/tools/emailInsights';
import { EmailAI } from '../../../src/ai/emailAI';
import Nylas from 'nylas';
import { EmailInsightsParams, Email, EmailAnalysis } from '../../../src/types';
// Mock dependencies
jest.mock('../../../src/ai/emailAI');
jest.mock('nylas');
describe('EmailInsightsTool', () => {
  let tool: EmailInsightsTool;
  let mockEmailAI: jest.Mocked<EmailAI>;
  let mockNylas: jest.Mocked<Nylas>;
  beforeEach(() => {
    jest.clearAllMocks();
    // Create mock instances
    mockEmailAI = new EmailAI() as jest.Mocked<EmailAI>;
    mockNylas = new Nylas({ apiKey: 'test' }) as jest.Mocked<Nylas>;
    // Setup default mocks for EmailAI methods
    (mockEmailAI as any).understandInsightsQuery = jest.fn<any>();
    (mockEmailAI as any).generateDailyInsights = jest.fn<any>();
    (mockEmailAI as any).generateWeeklyInsights = jest.fn<any>();
    (mockEmailAI as any).generateImportantItemsInsights = jest.fn<any>();
    (mockEmailAI as any).generateResponseNeededInsights = jest.fn<any>();
    (mockEmailAI as any).generateAnalyticsInsights = jest.fn<any>();
    (mockEmailAI as any).generateRelationshipInsights = jest.fn<any>();
    (mockEmailAI as any).categorizeEmails = jest.fn<any>();
    tool = new EmailInsightsTool(mockNylas, 'grant123', mockEmailAI);
  });
  describe('daily summary', () => {
    it('should generate daily summary insights', async () => {
      const params: EmailInsightsParams = {
        query: 'summarize my emails today'
      };
      const todayStart = new Date();
      todayStart.setHours(0, 0, 0, 0);
      // Mock emails from today
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Urgent: Project deadline',
          from: [{ email: 'boss@company.com', name: 'Boss' }],
          date: Date.now() / 1000,
          unread: true
        },
        {
          id: 'msg2',
          subject: 'Meeting reminder',
          from: [{ email: 'calendar@company.com' }],
          date: Date.now() / 1000,
          unread: false
        },
        {
          id: 'msg3',
          subject: 'Newsletter: Daily Tech',
          from: [{ email: 'news@techsite.com' }],
          date: Date.now() / 1000,
          unread: true
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock AI analysis
      // Mock AI understanding of query
      (mockEmailAI as any).understandInsightsQuery = jest.fn<any>().mockResolvedValue({
        insight_type: 'daily_summary'
      });
      mockEmailAI.analyzeEmailImportance.mockResolvedValue([
        {
          email_id: 'msg1',
          importance_score: 0.95,
          category: 'urgent_alert',
          reason: 'Urgent project deadline from boss',
          action_required: true
        },
        {
          email_id: 'msg2',
          importance_score: 0.7,
          category: 'notification',
          reason: 'Meeting reminder',
          action_required: false
        },
        {
          email_id: 'msg3',
          importance_score: 0.2,
          category: 'newsletter',
          reason: 'Daily newsletter',
          action_required: false
        }
      ]);
      // Mock AI daily insights generation
      (mockEmailAI as any).generateDailyInsights = jest.fn<any>().mockResolvedValue({
        executive_summary: '3 emails today with 2 unread. 1 urgent item requires immediate attention.',
        key_highlights: ['Urgent project deadline from boss', 'Meeting reminder for today'],
        action_priorities: ['Review and respond to boss about project deadline'],
        patterns: ['Higher than usual urgent emails'],
        recommendations: ['Address urgent deadline first', 'Clear unread emails']
      });
      const result = await tool.execute(params);
      expect(result.summary).toContain('3 emails today');
      expect(result.summary).toContain('2 unread');
      expect(result.insights.total_emails).toBe(3);
      expect(result.insights.unread_count).toBe(2);
      expect(result.insights.important_emails).toHaveLength(1);
      expect(result.insights.categories).toEqual({
        urgent_alert: 1,
        notification: 1,
        newsletter: 1
      });
    });
  });
  describe('important items', () => {
    it('should identify important emails that need attention', async () => {
      const params: EmailInsightsParams = {
        query: 'what important emails did I get?'
      };
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Contract needs signature',
          from: [{ email: 'legal@company.com' }],
          snippet: 'Please sign the attached contract by Friday...'
        },
        {
          id: 'msg2',
          subject: 'Budget approval required',
          from: [{ email: 'finance@company.com' }],
          snippet: 'Q1 budget needs your approval...'
        },
        {
          id: 'msg3',
          subject: 'FYI: Team update',
          from: [{ email: 'team@company.com' }],
          snippet: 'Just wanted to share...'
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      mockEmailAI.analyzeEmailImportance.mockResolvedValue([
        {
          email_id: 'msg1',
          importance_score: 0.95,
          category: 'urgent_alert',
          reason: 'Contract requires signature by deadline',
          action_required: true
        },
        {
          email_id: 'msg2',
          importance_score: 0.9,
          category: 'urgent_alert',
          reason: 'Budget approval needed',
          action_required: true
        },
        {
          email_id: 'msg3',
          importance_score: 0.3,
          category: 'notification',
          reason: 'Team update for awareness',
          action_required: false
        }
      ]);
      // Mock AI understanding of query
      (mockEmailAI as any).understandInsightsQuery = jest.fn<any>().mockResolvedValue({
        insight_type: 'important_items'
      });
      // Mock AI important items generation
      (mockEmailAI as any).generateImportantItemsInsights = jest.fn<any>().mockResolvedValue({
        executive_summary: 'Found 2 important emails that require attention. 2 action items identified.',
        priority_items: [
          {
            email_id: 'msg1',
            subject: 'Contract needs signature',
            from: 'legal@company.com',
            importance_reason: 'Contract requires signature by deadline',
            action_required: 'Sign the attached contract'
          },
          {
            email_id: 'msg2',
            subject: 'Budget approval required',
            from: 'finance@company.com',
            importance_reason: 'Budget approval needed',
            action_required: 'Approve Q1 budget'
          }
        ],
        action_plan: ['Sign contract by Friday', 'Approve Q1 budget'],
        key_deadlines: ['Friday: Contract signature']
      });
      // Mock action items
      mockEmailAI.extractActionItems
        .mockResolvedValueOnce([
          {
            task: 'Sign contract',
            deadline: 'Friday',
            priority: 'high'
          }
        ])
        .mockResolvedValueOnce([
          {
            task: 'Approve Q1 budget',
            deadline: undefined,
            priority: 'high'
          }
        ]);
      const result = await tool.execute(params);
      expect(result.summary).toContain('Found 2 important emails that require attention');
      expect(result.insights.priority_items).toHaveLength(2);
      expect(result.insights.action_items).toHaveLength(2);
      expect(result.insights.action_items?.[0].task).toBe('Sign contract');
      expect(result.insights.action_plan).toContain('Sign contract by Friday');
      expect(result.insights.key_deadlines).toContain('Friday: Contract signature');
    });
  });
  describe('response needed', () => {
    it('should find emails that need responses', async () => {
      const params: EmailInsightsParams = {
        query: 'what emails need my response?'
      };
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Question about project',
          from: [{ email: 'colleague@company.com' }],
          snippet: 'Can you clarify the requirements?',
          thread_id: 'thread1'
        },
        {
          id: 'msg2',
          subject: 'Re: Meeting tomorrow',
          from: [{ email: 'boss@company.com' }],
          snippet: 'Are you available at 3pm?',
          thread_id: 'thread2'
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock thread checking to see if replied
      mockNylas.threads = {
        find: jest.fn<any>()
          .mockResolvedValueOnce({ 
            data: { 
              id: 'thread1',
              messageIds: ['msg1'] // No reply
            } 
          })
          .mockResolvedValueOnce({ 
            data: { 
              id: 'thread2',
              messageIds: ['msg2'] // No reply
            } 
          })
      } as any;
      // Mock AI understanding of query
      (mockEmailAI as any).understandInsightsQuery = jest.fn<any>().mockResolvedValue({
        insight_type: 'response_needed'
      });
      // Mock AI response insights generation
      (mockEmailAI as any).generateResponseNeededInsights = jest.fn<any>().mockResolvedValue({
        executive_summary: '2 emails need responses. 1 is high priority.',
        response_priorities: [
          {
            email_id: 'msg2',
            subject: 'Re: Meeting tomorrow',
            from: 'boss@company.com',
            urgency: 'high',
            suggested_response: 'Confirm availability for 3pm meeting',
            context: 'Boss asking about meeting availability'
          },
          {
            email_id: 'msg1',
            subject: 'Question about project',
            from: 'colleague@company.com',
            urgency: 'medium',
            suggested_response: 'Provide project requirements clarification',
            context: 'Colleague needs clarification on requirements'
          }
        ],
        response_strategy: ['Start with high-priority boss email', 'Then address colleague question'],
        time_estimate: '15-20 minutes'
      });
      const result = await tool.execute(params);
      expect(result.summary).toContain('2 emails need responses');
      expect(result.insights.response_priorities).toHaveLength(2);
      expect(result.insights.response_priorities[0].urgency).toBe('high');
      expect(result.insights.time_estimate).toBe('15-20 minutes');
    });
  });
  describe('analytics', () => {
    it('should provide email analytics for time period', async () => {
      const params: EmailInsightsParams = {
        query: 'show me email analytics for this week'
      };
      // Mock emails from past week
      const mockEmails = Array(20).fill(null).map((_, i) => ({
        id: `msg${i}`,
        subject: `Email ${i}`,
        from: [{ email: i < 10 ? 'sender1@test.com' : 'sender2@test.com' }],
        date: Math.floor((Date.now() - i * 24 * 60 * 60 * 1000) / 1000),
        unread: i < 5
      }));
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock AI categorization
      (mockEmailAI as any).categorizeEmails = jest.fn<any>().mockResolvedValue(
        new Map([
          ['work', ['msg0', 'msg1', 'msg2', 'msg3', 'msg4']],
          ['personal', ['msg5', 'msg6', 'msg7']],
          ['newsletters', ['msg8', 'msg9', 'msg10']]
        ])
      );
      // Mock AI understanding of query
      (mockEmailAI as any).understandInsightsQuery = jest.fn<any>().mockResolvedValue({
        insight_type: 'analytics',
        time_period: 'week'
      });
      // Mock AI analytics generation
      (mockEmailAI as any).generateAnalyticsInsights = jest.fn<any>().mockResolvedValue({
        executive_summary: 'Email activity is moderate with 20 emails this week (2.9/day). Most communication is work-related.',
        volume_analysis: {
          trend: 'Normal activity levels',
          pattern: 'Higher volume on weekdays',
          anomalies: ['Spike on Tuesday with 5 emails']
        },
        sender_insights: {
          top_relationships: ['sender1@test.com', 'sender2@test.com'],
          communication_balance: 'Balanced between sending and receiving',
          new_contacts: ['newcontact@test.com']
        },
        productivity_metrics: {
          response_rate: '75% of emails requiring response were answered',
          peak_hours: ['9-10 AM', '2-3 PM'],
          email_habits: ['Quick responder', 'Organized inbox']
        },
        recommendations: ['Consider batching email responses', 'Set up filters for newsletters']
      });
      const result = await tool.execute(params);
      expect(result.summary).toContain('Email activity is moderate');
      expect(result.insights.volume_analysis).toBeDefined();
      expect(result.insights.sender_insights.top_relationships).toContain('sender1@test.com');
      expect(result.insights.productivity_metrics.response_rate).toContain('75%');
      expect(result.insights.recommendations).toHaveLength(2);
    });
  });
  describe('relationships', () => {
    it('should analyze email relationships and communication patterns', async () => {
      const params: EmailInsightsParams = {
        query: 'who am I communicating with most?'
      };
      // Mock emails with various senders
      const mockEmails = [
        { id: '1', from: [{ email: 'boss@company.com' }], to: [{ email: 'me@company.com' }] },
        { id: '2', from: [{ email: 'me@company.com' }], to: [{ email: 'boss@company.com' }] },
        { id: '3', from: [{ email: 'boss@company.com' }], to: [{ email: 'me@company.com' }] },
        { id: '4', from: [{ email: 'client@external.com' }], to: [{ email: 'me@company.com' }] },
        { id: '5', from: [{ email: 'newsletter@service.com' }], to: [{ email: 'me@company.com' }] }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      mockEmailAI.analyzeEmailImportance.mockResolvedValue(
        mockEmails.map((email, i) => ({
          email_id: email.id,
          importance_score: i < 3 ? 0.8 : 0.3,
          category: i < 3 ? 'client_email' : 'newsletter' as any,
          reason: 'test',
          action_required: false
        }))
      );
      // Mock AI understanding of query
      (mockEmailAI as any).understandInsightsQuery = jest.fn<any>().mockResolvedValue({
        insight_type: 'relationships'
      });
      // Mock AI relationship insights generation
      (mockEmailAI as any).generateRelationshipInsights = jest.fn<any>().mockResolvedValue({
        executive_summary: 'Your communication network shows healthy patterns with 3 key relationships.',
        key_relationships: [
          {
            contact: 'boss@company.com',
            relationship_type: 'manager',
            communication_style: 'Formal, frequent exchanges',
            insights: ['High response rate', 'Regular check-ins']
          },
          {
            contact: 'client@external.com',
            relationship_type: 'client',
            communication_style: 'Professional, project-focused',
            insights: ['Important for business', 'Needs timely responses']
          }
        ],
        communication_patterns: {
          balance_analysis: 'Well-balanced communication with most contacts',
          response_patterns: ['Quick responses to important contacts', 'Some delayed responses to newsletters'],
          collaboration_insights: ['Strong collaboration with boss', 'Growing client relationship']
        },
        network_insights: {
          growing_relationships: ['client@external.com'],
          neglected_contacts: ['colleague@company.com'],
          communication_health: 'Good - maintaining key relationships well'
        },
        recommendations: ['Schedule regular check-ins with neglected contacts', 'Maintain current response patterns']
      });
      const result = await tool.execute(params);
      expect(result.summary).toContain('Your communication network shows healthy patterns');
      expect(result.insights.key_relationships).toHaveLength(2);
      expect(result.insights.key_relationships[0].contact).toBe('boss@company.com');
      expect(result.insights.network_insights.communication_health).toContain('Good');
      expect(result.insights.recommendations).toHaveLength(2);
    });
  });
  describe('error handling', () => {
    it('should handle Nylas API errors', async () => {
      const params: EmailInsightsParams = {
        query: 'summarize my emails today'
      };
      // Mock AI understanding of query
      (mockEmailAI as any).understandInsightsQuery = jest.fn<any>().mockResolvedValue({
        insight_type: 'daily_summary'
      });
      mockNylas.messages = {
        list: jest.fn<any>().mockRejectedValue(new Error('API error'))
      } as any;
      await expect(tool.execute(params)).rejects.toThrow();
    });
    it('should handle AI analysis errors gracefully', async () => {
      const params: EmailInsightsParams = {
        query: 'what important emails did I get?'
      };
      // Mock AI understanding of query
      (mockEmailAI as any).understandInsightsQuery = jest.fn<any>().mockResolvedValue({
        insight_type: 'important_items'
      });
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: [{ id: '1', subject: 'Test' }] })
      } as any;
      mockEmailAI.analyzeEmailImportance.mockRejectedValue(new Error('AI unavailable'));
      const result = await tool.execute(params);
      // Should still return basic insights without AI analysis
      expect(result.insights.total_emails).toBe(1);
      expect(result.insights.important_emails).toEqual([]);
    });
  });
});
</file>

<file path="unit/tools/findEmails.test.ts">
import { describe, it, expect, jest, beforeEach } from '@jest/globals';
import { FindEmailsTool } from '../../../src/tools/findEmails';
import { EmailAI } from '../../../src/ai/emailAI';
import Nylas from 'nylas';
import { FindEmailsParams, Email, EmailAnalysis } from '../../../src/types';
// Mock dependencies
jest.mock('../../../src/ai/emailAI');
jest.mock('nylas');
describe('FindEmailsTool', () => {
  let tool: FindEmailsTool;
  let mockEmailAI: jest.Mocked<EmailAI>;
  let mockNylas: jest.Mocked<Nylas>;
  beforeEach(() => {
    jest.clearAllMocks();
    // Create mock instances
    mockEmailAI = new EmailAI() as jest.Mocked<EmailAI>;
    mockNylas = new Nylas({ apiKey: 'test' }) as jest.Mocked<Nylas>;
    // Default mock for AI understanding
    mockEmailAI.understandQuery.mockResolvedValue({
      intent: 'find',
      recipients: [],
      subject: undefined,
      key_points: [],
      urgency: 'normal',
      tone: 'professional'
    });
    // Default mock for search query understanding
    mockEmailAI.understandSearchQuery.mockResolvedValue({
      intent: 'find',
      timeframe: undefined,
      senders: [],
      keywords: [],
      filters: {}
    });
    tool = new FindEmailsTool(mockNylas, 'grant123', mockEmailAI);
  });
  describe('natural language search', () => {
    it('should find unread emails from manager', async () => {
      const params: FindEmailsParams = {
        query: 'unread emails from my manager',
        analysis_type: 'summary',
        limit: 20
      };
      // Mock search understanding
      mockEmailAI.understandSearchQuery.mockResolvedValue({
        intent: 'find',
        timeframe: undefined,
        senders: ['manager@company.com'],
        keywords: ['manager', 'unread'],
        filters: {
          unread: true
        }
      });
      // Mock AI summary generation
      mockEmailAI.generateAggregatedSummary.mockResolvedValue(
        'Found 2 unread emails from your manager about Q4 goals and budget planning.'
      );
      // Mock Nylas search
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Q4 Goals Review',
          from: [{ email: 'manager@company.com', name: 'John Manager' }],
          snippet: 'Please review the attached Q4 goals...',
          unread: true,
          date: Date.now() / 1000
        },
        {
          id: 'msg2',
          subject: '1:1 Meeting Notes',
          from: [{ email: 'manager@company.com', name: 'John Manager' }],
          snippet: 'Here are the notes from our 1:1...',
          unread: true,
          date: (Date.now() - 86400000) / 1000
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock AI analysis
      mockEmailAI.analyzeEmailImportance.mockResolvedValue([
        {
          email_id: 'msg1',
          importance_score: 0.9,
          category: 'urgent_alert',
          reason: 'Q4 goals review from manager',
          action_required: true,
          suggested_folder: 'Important'
        },
        {
          email_id: 'msg2',
          importance_score: 0.7,
          category: 'client_email',
          reason: '1:1 meeting notes to review',
          action_required: true,
          suggested_folder: 'Action Required'
        }
      ]);
      const result = await tool.execute(params);
      // For 'summary' analysis_type, emails array is not returned, only summary
      expect(result.emails).toBeUndefined();
      expect(result.total_count).toBe(2);
      expect(result.summary).toBeDefined();
      expect(typeof result.summary).toBe('string');
      expect(mockNylas.messages.list).toHaveBeenCalledWith(
        expect.objectContaining({
          identifier: 'grant123',
          queryParams: expect.objectContaining({
            unread: true,
            limit: 20
          })
        })
      );
    });
    it('should find invoices from last month', async () => {
      const params: FindEmailsParams = {
        query: 'invoices from last month',
        analysis_type: 'detailed',
        limit: 50
      };
      // Mock date calculations
      const now = new Date();
      const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);
      // Mock search understanding for invoices with date filter
      mockEmailAI.understandSearchQuery.mockResolvedValue({
        intent: 'find',
        timeframe: {
          start: lastMonthStart,
          end: lastMonthEnd
        },
        senders: [],
        keywords: ['invoice', 'billing', 'payment'],
        filters: {}
      });
      const mockInvoices = [
        {
          id: 'inv1',
          subject: 'Invoice #12345',
          from: [{ email: 'billing@vendor.com' }],
          snippet: 'Invoice for services rendered...',
          date: (lastMonthStart.getTime() + 86400000) / 1000
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockInvoices })
      } as any;
      mockEmailAI.analyzeEmailImportance.mockResolvedValue([
        {
          email_id: 'inv1',
          importance_score: 0.6,
          category: 'other',
          reason: 'Invoice for tracking',
          action_required: false,
          suggested_folder: 'Invoices'
        }
      ]);
      const result = await tool.execute(params);
      expect(result.emails).toHaveLength(1);
      expect(result.analysis).toBeDefined();
      expect(result.analysis?.[0].importance_score).toBe(0.6);
      expect(mockNylas.messages.list).toHaveBeenCalledWith(
        expect.objectContaining({
          queryParams: expect.objectContaining({
            searchQueryNative: expect.stringContaining('invoice'),
            receivedAfter: expect.any(Number),
            receivedBefore: expect.any(Number)
          })
        })
      );
    });
    it('should find important emails user hasn\'t responded to', async () => {
      const params: FindEmailsParams = {
        query: 'important emails I haven\'t responded to',
        analysis_type: 'action_items'
      };
      // Mock search understanding for important unreplied emails
      mockEmailAI.understandSearchQuery.mockResolvedValue({
        intent: 'find',
        timeframe: undefined,
        senders: [],
        keywords: ['important', 'response', 'reply'],
        filters: {
          unread: false // Looking for read but unresponded emails
        }
      });
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Contract Review Needed',
          from: [{ email: 'legal@company.com' }],
          snippet: 'Please review the attached contract by Friday...',
          thread_id: 'thread1'
        },
        {
          id: 'msg2',
          subject: 'Budget Approval Required',
          from: [{ email: 'finance@company.com' }],
          snippet: 'Q1 budget needs your approval...',
          thread_id: 'thread2'
        }
      ];
      // Mock finding emails
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock thread checking (to see if replied)
      mockNylas.threads = {
        find: jest.fn<any>()
          .mockResolvedValueOnce({ 
            data: { 
              id: 'thread1',
              messageIds: ['msg1'] // Only original message, no reply
            } 
          })
          .mockResolvedValueOnce({ 
            data: { 
              id: 'thread2',
              messageIds: ['msg2'] // Only original message, no reply
            } 
          })
      } as any;
      // Mock importance analysis
      mockEmailAI.analyzeEmailImportance.mockResolvedValue([
        {
          email_id: 'msg1',
          importance_score: 0.95,
          category: 'urgent_alert',
          reason: 'Contract review with deadline',
          action_required: true
        },
        {
          email_id: 'msg2',
          importance_score: 0.9,
          category: 'urgent_alert',
          reason: 'Budget approval needed',
          action_required: true
        }
      ]);
      // Mock action item extraction
      mockEmailAI.extractActionItems
        .mockResolvedValueOnce([
          {
            task: 'Review contract',
            deadline: 'Friday',
            priority: 'high'
          }
        ])
        .mockResolvedValueOnce([
          {
            task: 'Approve Q1 budget',
            deadline: undefined,
            priority: 'high'
          }
        ]);
      const result = await tool.execute(params);
      expect(result.emails).toHaveLength(2);
      expect(result.action_items).toHaveLength(2);
      expect(result.action_items?.[0].task).toBe('Review contract');
      expect(result.action_items?.[1].task).toBe('Approve Q1 budget');
    });
  });
  describe('analysis types', () => {
    it('should provide summary analysis', async () => {
      const params: FindEmailsParams = {
        query: 'emails from today',
        analysis_type: 'summary'
      };
      // Mock search understanding for today's emails
      mockEmailAI.understandSearchQuery.mockResolvedValue({
        intent: 'find',
        timeframe: {
          start: new Date(new Date().setHours(0, 0, 0, 0)),
          end: new Date(new Date().setHours(23, 59, 59, 999))
        },
        senders: [],
        keywords: ['today'],
        filters: {}
      });
      const mockEmails = [
        { id: '1', subject: 'Meeting invite', from: [{ email: 'a@test.com' }] },
        { id: '2', subject: 'Project update', from: [{ email: 'b@test.com' }] },
        { id: '3', subject: 'Lunch?', from: [{ email: 'c@test.com' }] }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock AI summary generation (summary type doesn't use analyzeEmailImportance)
      mockEmailAI.generateAggregatedSummary.mockResolvedValue(
        'Found 3 emails from today: 1 meeting invite, 1 project update, and 1 personal message. 1 requires action.'
      );
      const result = await tool.execute(params);
      expect(result.summary).toBeDefined();
      expect(result.summary).toContain('Found 3 emails');
      expect(result.summary).toContain('1 requires action');
      expect(result.analysis).toBeUndefined(); // Summary mode doesn't include full analysis
    });
    it('should provide priority analysis', async () => {
      const params: FindEmailsParams = {
        query: 'all emails',
        analysis_type: 'priority',
        limit: 10
      };
      const mockEmails = Array(5).fill(null).map((_, i) => ({
        id: `msg${i}`,
        subject: `Email ${i}`,
        from: [{ email: `sender${i}@test.com` }]
      }));
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      const mockAnalysis: EmailAnalysis[] = mockEmails.map((e, i) => ({
        email_id: e.id,
        importance_score: (5 - i) * 0.2, // Descending importance
        category: i === 0 ? 'urgent_alert' : 'other' as any,
        reason: `Reason ${i}`,
        action_required: i < 2
      }));
      mockEmailAI.analyzeEmailImportance.mockResolvedValue(mockAnalysis);
      const result = await tool.execute(params);
      expect(result.emails).toHaveLength(5);
      expect(result.analysis).toHaveLength(5);
      // Should be sorted by importance
      expect(result.analysis?.[0].importance_score).toBe(1.0);
      expect(result.analysis?.[4].importance_score).toBe(0.2);
    });
  });
  describe('error handling', () => {
    it('should handle Nylas API errors', async () => {
      const params: FindEmailsParams = {
        query: 'test query'
      };
      mockNylas.messages = {
        list: jest.fn<any>().mockRejectedValue(new Error('API rate limit exceeded'))
      } as any;
      await expect(tool.execute(params)).rejects.toThrow('API rate limit exceeded');
    });
    it('should handle AI analysis errors gracefully', async () => {
      const params: FindEmailsParams = {
        query: 'test emails',
        analysis_type: 'detailed'
      };
      // Mock search understanding for test query
      mockEmailAI.understandSearchQuery.mockResolvedValue({
        intent: 'find',
        timeframe: undefined,
        senders: [],
        keywords: ['test'],
        filters: {}
      });
      const mockEmails = [
        { id: '1', subject: 'Test', from: [{ email: 'test@test.com' }] }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      mockEmailAI.analyzeEmailImportance.mockRejectedValue(new Error('AI service unavailable'));
      const result = await tool.execute(params);
      // Should still return emails even if analysis fails
      expect(result.emails).toHaveLength(1);
      expect(result.analysis).toBeUndefined();
      expect(result.summary).toContain('Found 1 email');
    });
  });
  describe('query parsing', () => {
    it('should parse date ranges correctly', async () => {
      const params: FindEmailsParams = {
        query: 'emails from last week'
      };
      // Mock search understanding for date range
      const lastWeekStart = new Date();
      lastWeekStart.setDate(lastWeekStart.getDate() - 7);
      const lastWeekEnd = new Date();
      mockEmailAI.understandSearchQuery.mockResolvedValue({
        intent: 'find',
        timeframe: {
          start: lastWeekStart,
          end: lastWeekEnd
        },
        senders: [],
        keywords: ['last week'],
        filters: {}
      });
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: [] })
      } as any;
      await tool.execute(params);
      expect(mockNylas.messages.list).toHaveBeenCalledWith(
        expect.objectContaining({
          queryParams: expect.objectContaining({
            receivedAfter: expect.any(Number),
            receivedBefore: expect.any(Number)
          })
        })
      );
    });
    it('should parse sender queries', async () => {
      const params: FindEmailsParams = {
        query: 'emails from John about the project'
      };
      // Mock search understanding for sender query
      mockEmailAI.understandSearchQuery.mockResolvedValue({
        intent: 'find',
        timeframe: undefined,
        senders: ['john@company.com'],
        keywords: ['john', 'project'],
        filters: {}
      });
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: [] })
      } as any;
      await tool.execute(params);
      expect(mockNylas.messages.list).toHaveBeenCalledWith(
        expect.objectContaining({
          queryParams: expect.objectContaining({
            searchQueryNative: expect.stringContaining('from:john')
          })
        })
      );
    });
  });
});
</file>

<file path="unit/tools/manageEmail.test.ts">
import { describe, it, expect, jest, beforeEach } from '@jest/globals';
import { ManageEmailTool } from '../../../src/tools/manageEmail';
import { EmailAI } from '../../../src/ai/emailAI';
import Nylas from 'nylas';
import { ManageEmailParams, Email } from '../../../src/types';
// Mock dependencies
jest.mock('../../../src/ai/emailAI');
jest.mock('nylas');
describe('ManageEmailTool', () => {
  let tool: ManageEmailTool;
  let mockEmailAI: jest.Mocked<EmailAI>;
  let mockNylas: jest.Mocked<Nylas>;
  beforeEach(() => {
    jest.clearAllMocks();
    // Create mock instances
    mockEmailAI = new EmailAI() as jest.Mocked<EmailAI>;
    mockNylas = new Nylas({ apiKey: 'test' }) as jest.Mocked<Nylas>;
    // Mock contacts.list for contact lookup
    mockNylas.contacts = {
      list: jest.fn<any>().mockResolvedValue({ data: [] })
    } as any;
    // Mock grants.find for sender info
    mockNylas.grants = {
      find: jest.fn<any>().mockResolvedValue({
        data: { email: 'sender@example.com' }
      })
    } as any;
    tool = new ManageEmailTool(mockNylas, 'grant123', mockEmailAI, { userName: 'Test User', userEmail: 'testuser@example.com' });
  });
  describe('send email', () => {
    it('should return approval request for sending new email', async () => {
      const params: ManageEmailParams = {
        action: 'send',
        query: 'send an email to john@example.com about the meeting tomorrow',
        require_approval: true
      };
      // Mock AI understanding
      mockEmailAI.understandQuery.mockResolvedValue({
        intent: 'send',
        recipients: ['john@example.com'],
        subject: 'Meeting Tomorrow',
        key_points: ['meeting scheduled for tomorrow'],
        urgency: 'normal',
        tone: 'professional'
      });
      // Mock email generation
      mockEmailAI.generateEmailContent.mockResolvedValue({
        to: ['john@example.com'],
        subject: 'Meeting Tomorrow',
        body: 'Hi John,\n\nI wanted to confirm our meeting scheduled for tomorrow...',
        cc: undefined,
        bcc: undefined
      });
      const result = await tool.execute(params);
      expect(result.needs_approval).toBe(true);
      expect(result.action_type).toBe('send_email');
      expect(result.action_data).toEqual({
        email_content: {
          to: ['john@example.com'],
          subject: 'Meeting Tomorrow',
          body: 'Hi John,\n\nI wanted to confirm our meeting scheduled for tomorrow...',
          cc: undefined,
          bcc: undefined
        },
        original_params: {
          action: 'send',
          query: 'send an email to john@example.com about the meeting tomorrow',
          context_message_id: undefined
        },
        intent: {
          intent: 'send',
          recipients: ['john@example.com'],
          subject: 'Meeting Tomorrow',
          key_points: ['meeting scheduled for tomorrow'],
          urgency: 'normal',
          tone: 'professional'
        }
      });
      expect(result.preview.summary).toContain('john@example.com');
      expect(mockEmailAI.understandQuery).toHaveBeenCalledWith(params.query, undefined);
      expect(mockEmailAI.generateEmailContent).toHaveBeenCalled();
    });
    it('should execute approved email action', async () => {
      const emailContent = {
        to: ['john@example.com'],
        subject: 'Meeting Tomorrow',
        body: 'Hi John,\n\nI wanted to confirm our meeting scheduled for tomorrow...',
        cc: undefined,
        bcc: undefined
      };
      const params: ManageEmailParams = {
        action: 'send',
        query: 'send an email to john@example.com about the meeting tomorrow',
        approved: true,
        action_data: {
          email_content: emailContent,
          original_params: {
            action: 'send',
            query: 'send an email to john@example.com about the meeting tomorrow'
          }
        }
      };
      // Mock Nylas send
      const mockMessage = { data: { id: 'msg123' } };
      mockNylas.messages = {
        send: jest.fn<any>().mockResolvedValue(mockMessage)
      } as any;
      const result = await tool.execute(params);
      expect(result.success).toBe(true);
      expect(result.message_id).toBe('msg123');
      expect(mockNylas.messages.send).toHaveBeenCalledWith({
        identifier: 'grant123',
        requestBody: {
          to: [{ email: 'john@example.com' }],
          subject: 'Meeting Tomorrow',
          body: 'Hi John,<br><br>I wanted to confirm our meeting scheduled for tomorrow...',
          cc: undefined,
          bcc: undefined,
          replyToMessageId: undefined
        }
      });
    });
    it('should skip approval when require_approval is false', async () => {
      const params: ManageEmailParams = {
        action: 'send',
        query: 'send test email to myself',
        require_approval: false
      };
      // Mock AI understanding
      mockEmailAI.understandQuery.mockResolvedValue({
        intent: 'send',
        recipients: ['me@example.com'],
        subject: 'Test',
        key_points: ['test email'],
        urgency: 'low',
        tone: 'casual'
      });
      // Mock email generation
      mockEmailAI.generateEmailContent.mockResolvedValue({
        to: ['me@example.com'],
        subject: 'Test',
        body: 'This is a test email.',
        cc: undefined,
        bcc: undefined
      });
      // Mock Nylas send
      const mockMessage = { data: { id: 'msg123' } };
      mockNylas.messages = {
        send: jest.fn<any>().mockResolvedValue(mockMessage)
      } as any;
      const result = await tool.execute(params);
      expect(result.success).toBe(true);
      expect(result.message_id).toBe('msg123');
      expect(mockNylas.messages.send).toHaveBeenCalled();
      expect(result).not.toHaveProperty('needs_approval');
    });
  });
  describe('reply to email', () => {
    it('should handle reply with context message', async () => {
      const params: ManageEmailParams = {
        action: 'reply',
        query: 'reply thanking for the proposal',
        context_message_id: 'msg456'
      };
      // Mock finding the original message
      const originalMessage: Email = {
        id: 'msg456',
        subject: 'Project Proposal',
        from: [{ email: 'sarah@company.com', name: 'Sarah' }],
        body: 'Here is our proposal...',
        thread_id: 'thread123'
      };
      mockNylas.messages = {
        find: jest.fn<any>().mockResolvedValue({ data: originalMessage }),
        send: jest.fn<any>().mockResolvedValue({ data: { id: 'msg789' } })
      } as any;
      // Mock AI understanding with context
      mockEmailAI.understandQuery.mockResolvedValue({
        intent: 'reply',
        recipients: ['sarah@company.com'],
        subject: 'Re: Project Proposal',
        key_points: ['thank you for the proposal'],
        urgency: 'normal',
        tone: 'grateful'
      });
      // Mock email generation
      mockEmailAI.generateEmailContent.mockResolvedValue({
        to: ['sarah@company.com'],
        subject: 'Re: Project Proposal',
        body: 'Hi Sarah,\n\nThank you for sending the proposal...',
        in_reply_to: 'msg456'
      });
      // Skip approval for this test
      const paramsNoApproval = { ...params, require_approval: false };
      const result = await tool.execute(paramsNoApproval);
      expect(result.success).toBe(true);
      expect(mockNylas.messages.find).toHaveBeenCalledWith({
        identifier: 'grant123',
        messageId: 'msg456'
      });
      expect(mockEmailAI.understandQuery).toHaveBeenCalledWith(
        params.query,
        { 
          senderEmail: 'sarah@company.com',
          originalMessage: originalMessage
        }
      );
    });
    it('should find message automatically when no context_message_id provided', async () => {
      const params: ManageEmailParams = {
        action: 'reply',
        query: 'reply to Sarah about the budget',
        require_approval: false
      };
      // Mock message search
      const searchResults = {
        data: [{
          id: 'msg999',
          subject: 'Budget Planning',
          from: [{ email: 'sarah@company.com' }],
          date: Date.now() / 1000
        }]
      };
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue(searchResults),
        find: jest.fn<any>().mockResolvedValue({ data: searchResults.data[0] }),
        send: jest.fn<any>().mockResolvedValue({ data: { id: 'msg1000' } })
      } as any;
      // Mock AI understanding
      mockEmailAI.understandQuery.mockResolvedValue({
        intent: 'reply',
        recipients: ['sarah@company.com'],
        subject: 'Re: Budget Planning',
        key_points: ['budget discussion'],
        urgency: 'normal',
        tone: 'professional'
      });
      // Mock email generation
      mockEmailAI.generateEmailContent.mockResolvedValue({
        to: ['sarah@company.com'],
        subject: 'Re: Budget Planning',
        body: 'Hi Sarah,\n\nRegarding the budget...'
      });
      const result = await tool.execute(params);
      expect(result.success).toBe(true);
      expect(mockNylas.messages.list).toHaveBeenCalledWith(
        expect.objectContaining({
          identifier: 'grant123',
          queryParams: expect.objectContaining({
            searchQueryNative: 'from:Sarah'
          })
        })
      );
    });
  });
  describe('forward email', () => {
    it('should forward email with added context', async () => {
      const params: ManageEmailParams = {
        action: 'forward',
        query: 'forward to the dev team with a summary',
        context_message_id: 'msg111'
      };
      // Mock original message
      const originalMessage: Email = {
        id: 'msg111',
        subject: 'Production Issue',
        from: [{ email: 'alerts@system.com' }],
        body: 'Alert: Database connection issues detected...'
      };
      mockNylas.messages = {
        find: jest.fn<any>().mockResolvedValue({ data: originalMessage }),
        send: jest.fn<any>().mockResolvedValue({ data: { id: 'msg222' } })
      } as any;
      // Mock AI understanding
      mockEmailAI.understandQuery.mockResolvedValue({
        intent: 'forward',
        recipients: ['dev-team@company.com'],
        subject: 'Fwd: Production Issue',
        key_points: ['forward with summary', 'database issues'],
        urgency: 'high',
        tone: 'professional'
      });
      // Mock email generation with forwarded content
      mockEmailAI.generateEmailContent.mockResolvedValue({
        to: ['dev-team@company.com'],
        subject: 'Fwd: Production Issue - Database Connection Alert',
        body: 'Team,\n\nForwarding this alert for immediate attention.\n\nSummary: Database connection issues in production.\n\n--- Original Message ---\nAlert: Database connection issues detected...'
      });
      const paramsNoApproval = { ...params, require_approval: false };
      const result = await tool.execute(paramsNoApproval);
      expect(result.success).toBe(true);
      expect(mockEmailAI.generateEmailContent).toHaveBeenCalledWith(
        expect.anything(),
        originalMessage,
        {},
        expect.anything() // sender info
      );
    });
  });
  describe('draft email', () => {
    it('should create draft instead of sending', async () => {
      const params: ManageEmailParams = {
        action: 'draft',
        query: 'draft a follow-up email about the project status'
      };
      // Mock AI understanding
      mockEmailAI.understandQuery.mockResolvedValue({
        intent: 'send',
        recipients: [],
        subject: 'Project Status Update',
        key_points: ['project status', 'follow-up'],
        urgency: 'normal',
        tone: 'professional'
      });
      // Mock email generation
      mockEmailAI.generateEmailContent.mockResolvedValue({
        to: [],
        subject: 'Project Status Update',
        body: 'Dear Team,\n\nI wanted to provide an update on the project status...'
      });
      // Mock draft creation
      mockNylas.drafts = {
        create: jest.fn<any>().mockResolvedValue({ 
          data: { id: 'draft123' } 
        })
      } as any;
      const result = await tool.execute(params);
      expect(result.success).toBe(true);
      expect(result.draft_id).toBe('draft123');
      expect(result.message).toContain('Draft created');
      expect(mockNylas.drafts.create).toHaveBeenCalled();
    });
  });
  describe('error handling', () => {
    it('should handle AI understanding errors', async () => {
      const params: ManageEmailParams = {
        action: 'send',
        query: 'ambiguous request'
      };
      mockEmailAI.understandQuery.mockRejectedValue(
        new Error('Could not understand intent')
      );
      await expect(tool.execute(params)).rejects.toThrow('Could not understand intent');
    });
    it('should handle Nylas API errors', async () => {
      const params: ManageEmailParams = {
        action: 'send',
        query: 'send email',
        require_approval: false
      };
      mockEmailAI.understandQuery.mockResolvedValue({
        intent: 'send',
        recipients: ['test@example.com'],
        subject: 'Test',
        key_points: ['test'],
        urgency: 'normal',
        tone: 'casual'
      });
      mockEmailAI.generateEmailContent.mockResolvedValue({
        to: ['test@example.com'],
        subject: 'Test',
        body: 'Test email'
      });
      mockNylas.messages = {
        send: jest.fn<any>().mockRejectedValue(new Error('API quota exceeded'))
      } as any;
      await expect(tool.execute(params)).rejects.toThrow('API quota exceeded');
    });
  });
});
</file>

<file path="unit/tools/organizeInbox.test.ts">
import { describe, it, expect, jest, beforeEach } from '@jest/globals';
import { OrganizeInboxTool } from '../../../src/tools/organizeInbox';
import { EmailAI } from '../../../src/ai/emailAI';
import Nylas from 'nylas';
import { OrganizeInboxParams, Email, EmailAnalysis } from '../../../src/types';
// Mock dependencies
jest.mock('../../../src/ai/emailAI');
jest.mock('nylas');
describe('OrganizeInboxTool', () => {
  let tool: OrganizeInboxTool;
  let mockEmailAI: jest.Mocked<EmailAI>;
  let mockNylas: jest.Mocked<Nylas>;
  beforeEach(() => {
    jest.clearAllMocks();
    // Create mock instances
    mockEmailAI = new EmailAI() as jest.Mocked<EmailAI>;
    mockNylas = new Nylas({ apiKey: 'test' }) as jest.Mocked<Nylas>;
    tool = new OrganizeInboxTool(mockNylas, 'grant123', mockEmailAI);
  });
  describe('organization with natural language instructions', () => {
    it('should return approval request for email organization', async () => {
      const params: OrganizeInboxParams = {
        instruction: 'move invoices to a finance folder and star important emails',
        dry_run: false
      };
      // Mock finding unread emails
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Invoice #12345',
          from: [{ email: 'billing@vendor.com' }],
          unread: true,
          folders: ['inbox']
        },
        {
          id: 'msg2',
          subject: 'Meeting Tomorrow',
          from: [{ email: 'boss@company.com' }],
          unread: true,
          folders: ['inbox']
        },
        {
          id: 'msg3',
          subject: 'Newsletter: Weekly Update',
          from: [{ email: 'news@service.com' }],
          unread: true,
          folders: ['inbox']
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock AI understanding of organization intent
      const mockUnderstandOrganizationIntent = jest.fn<any>().mockResolvedValue({
        rules: [
          {
            condition: 'subject contains invoice',
            action: 'move to folder',
            target: 'Finance'
          },
          {
            condition: 'from boss@company.com',
            action: 'star',
            target: null
          }
        ]
      });
      (mockEmailAI as any).understandOrganizationIntent = mockUnderstandOrganizationIntent;
      // Mock folder operations
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({
          data: [
            { id: 'inbox', name: 'Inbox' },
            { id: 'important', name: 'Important' },
            { id: 'invoices', name: 'Invoices' }
          ]
        }),
        create: jest.fn<any>().mockResolvedValue({
          data: { id: 'newsletters', name: 'Newsletters' }
        })
      } as any;
      // Mock message updates
      mockNylas.messages.update = jest.fn<any>().mockResolvedValue({ data: {} });
      const result = await tool.execute(params);
      // Should return approval request, not execute immediately
      expect(result.needs_approval).toBe(true);
      expect(result.action_type).toBe('organize_inbox');
      expect(result.action_data.organization_plan).toBeDefined();
      expect(result.preview.summary).toContain('Organize');
      expect(result.preview.summary).toContain('based on: "move invoices to a finance folder and star important emails"');
      expect(result.preview.details.total_actions).toBe(2); // 1 move + 1 star
      expect(result.preview.details.organization_rules).toHaveLength(2);
      expect((mockEmailAI as any).understandOrganizationIntent).toHaveBeenCalledWith(params.instruction);
      // Should not have executed any updates yet
      expect(mockNylas.messages.update).not.toHaveBeenCalled();
    });
    it('should execute approved organization', async () => {
      const organizationPlan = {
        rules: [
          {
            condition: 'subject contains invoice',
            action: 'move to folder',
            target: 'Finance'
          },
          {
            condition: 'from boss@company.com',
            action: 'star',
            target: null
          }
        ],
        preview_actions: ['move email "Invoice #12345" from billing@vendor.com to folder "Finance"', 'star email "Meeting Tomorrow" from boss@company.com'],
        organized_count: 2,
        total_actions: 2
      };
      const params: OrganizeInboxParams = {
        instruction: 'move invoices to a finance folder and star important emails',
        dry_run: false,
        approved: true,
        action_data: {
          organization_plan: organizationPlan,
          original_params: {
            instruction: 'move invoices to a finance folder and star important emails'
          }
        }
      };
      // Mock folder operations for execution
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({
          data: [
            { id: 'inbox', name: 'Inbox' },
            { id: 'finance', name: 'Finance' }
          ]
        }),
        create: jest.fn<any>().mockResolvedValue({
          data: { id: 'finance', name: 'Finance' }
        })
      } as any;
      // Mock message list for execution
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ 
          data: [
            { 
              id: 'msg1', 
              subject: 'Invoice #12345',
              from: [{ email: 'billing@vendor.com' }]
            },
            { 
              id: 'msg2', 
              subject: 'Meeting Tomorrow',
              from: [{ email: 'boss@company.com' }]
            }
          ] 
        }),
        update: jest.fn<any>().mockResolvedValue({ data: {} }),
        destroy: jest.fn<any>().mockResolvedValue({ data: {} })
      } as any;
      const result = await tool.execute(params);
      expect(result.organized_count).toBe(2);
      expect(result.actions_taken).toHaveLength(2);
      expect(result.approval_executed).toBe(true);
      expect(mockNylas.messages.update).toHaveBeenCalled();
    });
    it('should handle dry run mode', async () => {
      const params: OrganizeInboxParams = {
        instruction: 'archive old newsletters and move important emails to a priority folder',
        dry_run: true
      };
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Old Newsletter',
          date: Math.floor((Date.now() - 35 * 24 * 60 * 60 * 1000) / 1000), // 35 days old
          unread: false,
          folders: ['inbox']
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails }),
        update: jest.fn<any>().mockResolvedValue({ data: {} })
      } as any;
      // Mock AI understanding of organization intent
      const mockUnderstandOrganizationIntent = jest.fn<any>().mockResolvedValue({
        rules: [
          {
            condition: 'older than 30 days and subject contains newsletter',
            action: 'archive',
            target: null
          }
        ]
      });
      (mockEmailAI as any).understandOrganizationIntent = mockUnderstandOrganizationIntent;
      // Mock folders for archive
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({
          data: [
            { id: 'archive', name: 'Archive', attributes: ['\\Archive'] }
          ]
        })
      } as any;
      const result = await tool.execute(params);
      expect(result.preview_actions).toBeDefined();
      // In dry run mode, the actions are shown but not executed
      if (result.preview_actions.length > 0) {
        expect(result.preview_actions[0]).toContain('archive');
      }
      expect(result.organized_count).toBe(0); // No actual changes in dry run
      expect(mockNylas.messages.update).not.toHaveBeenCalled();
    });
  });
  describe('complex organization instructions', () => {
    it('should handle multiple organization rules', async () => {
      const params: OrganizeInboxParams = {
        instruction: 'archive all newsletters older than a week, star emails that need responses, and move receipts to a folder',
        dry_run: false
      };
      // Mock finding emails
      const mockEmails = [
        {
          id: 'msg1',
          subject: 'Invoice from AWS',
          from: [{ email: 'billing@aws.com' }]
        },
        {
          id: 'msg2',
          subject: 'URGENT: Server down',
          from: [{ email: 'alerts@monitoring.com' }]
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails }),
        update: jest.fn<any>().mockResolvedValue({ data: {} })
      } as any;
      // Mock AI understanding of the query
      const mockUnderstandOrganizationIntent = jest.fn<any>().mockResolvedValue({
        rules: [
          {
            condition: 'subject contains invoice',
            action: 'move to folder',
            target: 'Finance'
          },
          {
            condition: 'subject contains urgent',
            action: 'star',
            target: null
          }
        ]
      });
      (mockEmailAI as any).understandOrganizationIntent = mockUnderstandOrganizationIntent;
      // Mock folder operations
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({
          data: [{ id: 'inbox', name: 'Inbox' }]
        }),
        create: jest.fn<any>().mockResolvedValue({
          data: { id: 'finance', name: 'Finance' }
        })
      } as any;
      const result = await tool.execute(params);
      // Should return approval request
      expect(result.needs_approval).toBe(true);
      expect(result.action_type).toBe('organize_inbox');
      expect(result.preview.summary).toContain('Organize');
      expect(result.preview.summary).toContain('based on:');
      expect(result.preview.details.total_actions).toBe(2);
      expect((mockEmailAI as any).understandOrganizationIntent).toHaveBeenCalledWith(params.instruction);
      // Should not have executed updates yet
      expect(mockNylas.messages.update).not.toHaveBeenCalled();
    });
  });
  describe('specific organization rules', () => {
    it('should organize emails based on specific criteria', async () => {
      const params: OrganizeInboxParams = {
        instruction: 'move emails from newsletter@ to Newsletters folder and archive emails older than 30 days',
        dry_run: false
      };
      const mockEmails = [
        {
          id: 'msg1',
          from: [{ email: 'newsletter@company.com' }],
          date: Date.now() / 1000
        },
        {
          id: 'msg2',
          from: [{ email: 'person@example.com' }],
          date: Math.floor((Date.now() - 40 * 24 * 60 * 60 * 1000) / 1000) // 40 days old
        }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails })
      } as any;
      // Mock AI understanding of organization intent
      const mockUnderstandOrganizationIntent = jest.fn<any>().mockResolvedValue({
        rules: [
          {
            condition: 'from newsletter@',
            action: 'move to folder',
            target: 'Newsletters'
          },
          {
            condition: 'older than 30 days',
            action: 'archive',
            target: null
          }
        ]
      });
      (mockEmailAI as any).understandOrganizationIntent = mockUnderstandOrganizationIntent;
      // Mock folder operations
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({
          data: [
            { id: 'inbox', name: 'Inbox' },
            { id: 'archive', name: 'Archive', attributes: ['\\Archive'] }
          ]
        }),
        create: jest.fn<any>().mockResolvedValue({
          data: { id: 'newsletters', name: 'Newsletters' }
        })
      } as any;
      mockNylas.messages.update = jest.fn<any>().mockResolvedValue({ data: {} });
      const result = await tool.execute(params);
      // Should return approval request
      expect(result.needs_approval).toBe(true);
      expect(result.action_type).toBe('organize_inbox');
      expect(result.preview.summary).toContain('Organize');
      expect(result.preview.summary).toContain('based on:');
      expect(result.preview.details.total_actions).toBe(2);
      expect((mockEmailAI as any).understandOrganizationIntent).toHaveBeenCalledWith(params.instruction);
      // Should not have executed updates yet
      expect(mockNylas.messages.update).not.toHaveBeenCalled();
    });
  });
  describe('error handling', () => {
    it('should handle folder creation errors', async () => {
      const params: OrganizeInboxParams = {
        instruction: 'move emails to new folders based on importance'
      };
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ 
          data: [{ id: 'msg1', subject: 'Test' }] 
        })
      } as any;
      // Mock AI understanding of organization intent
      const mockUnderstandOrganizationIntent = jest.fn<any>().mockResolvedValue({
        rules: [
          {
            condition: 'all',
            action: 'move to folder',
            target: 'NewFolder'
          }
        ]
      });
      (mockEmailAI as any).understandOrganizationIntent = mockUnderstandOrganizationIntent;
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({ data: [] }),
        create: jest.fn<any>().mockRejectedValue(new Error('Folder creation failed'))
      } as any;
      const result = await tool.execute(params);
      // The error might be in different places depending on when it fails
      if (result.errors && result.errors.length > 0) {
        expect(result.errors[0]).toBeDefined();
      } else {
        // If no errors in planning, it might fail during execution
        expect(result.preview_actions).toBeDefined();
      }
      expect(result.organized_count).toBe(0);
    });
    it('should handle AI understanding errors gracefully', async () => {
      const params: OrganizeInboxParams = {
        instruction: 'organize my emails intelligently'
      };
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ 
          data: [{ id: 'msg1', subject: 'Test' }] 
        })
      } as any;
      // Mock AI understanding failure
      const mockUnderstandOrganizationIntent = jest.fn<any>().mockRejectedValue(
        new Error('AI service unavailable')
      );
      (mockEmailAI as any).understandOrganizationIntent = mockUnderstandOrganizationIntent;
      const result = await tool.execute(params);
      expect(result.errors[0]).toContain('Organization planning failed: AI service unavailable');
      expect(result.organized_count).toBe(0);
    });
  });
});
</file>

<file path="unit/tools/smartFolders.test.ts">
import { describe, it, expect, jest, beforeEach } from '@jest/globals';
import { SmartFoldersTool } from '../../../src/tools/smartFolders';
import { EmailAI } from '../../../src/ai/emailAI';
import Nylas from 'nylas';
import { SmartFoldersParams } from '../../../src/types';
// Mock dependencies
jest.mock('../../../src/ai/emailAI');
jest.mock('nylas');
describe('SmartFoldersTool', () => {
  let tool: SmartFoldersTool;
  let mockEmailAI: jest.Mocked<EmailAI>;
  let mockNylas: jest.Mocked<Nylas>;
  beforeEach(() => {
    jest.clearAllMocks();
    // Create mock instances
    mockEmailAI = new EmailAI() as jest.Mocked<EmailAI>;
    mockNylas = new Nylas({ apiKey: 'test' }) as jest.Mocked<Nylas>;
    tool = new SmartFoldersTool(mockNylas, 'grant123', mockEmailAI);
  });
  describe('create smart folder', () => {
    it('should create a smart folder based on natural language rules', async () => {
      const params: SmartFoldersParams = {
        query: 'create a folder for all emails from my team about projects'
      };
      // Mock AI understanding
      mockEmailAI.generateSmartFolderRules.mockResolvedValue({
        name: 'Team Projects',
        rules: [
          'from:@mycompany.com',
          'subject contains project OR subject contains sprint'
        ],
        description: 'Emails from team members about projects'
      });
      // Mock folder creation
      mockNylas.folders = {
        create: jest.fn<any>().mockResolvedValue({
          data: { id: 'folder123', name: 'Team Projects' }
        })
      } as any;
      const result = await tool.execute(params);
      expect(result.success).toBe(true);
      expect(result.folder_name).toBe('Team Projects');
      expect(result.rules).toHaveLength(2);
      expect(result.message).toContain('Smart folder "Team Projects" created');
      expect(mockEmailAI.generateSmartFolderRules).toHaveBeenCalledWith(params.query);
    });
    it('should handle folder creation with specific name', async () => {
      const params: SmartFoldersParams = {
        query: 'create a folder called Financial Documents for invoices and receipts',
        folder_name: 'Financial Documents'
      };
      // Mock AI understanding
      mockEmailAI.generateSmartFolderRules.mockResolvedValue({
        name: 'Financial Documents',
        rules: [
          'subject contains invoice OR subject contains receipt',
          'from:billing@ OR from:accounting@'
        ],
        description: 'Financial documents including invoices and receipts'
      });
      // Mock folder creation
      mockNylas.folders = {
        create: jest.fn<any>().mockResolvedValue({
          data: { id: 'folder456', name: 'Financial Documents' }
        })
      } as any;
      const result = await tool.execute(params);
      expect(result.folder_name).toBe('Financial Documents');
    });
  });
  describe('apply smart folder', () => {
    it('should return approval request for applying folder rules', async () => {
      const params: SmartFoldersParams = {
        query: 'apply the Team Projects folder rules',
        dry_run: false
      };
      // Mock finding the folder and its rules
      const mockFolderRules = new Map([
        ['team projects', {
          id: 'folder123',
          rules: ['from:@mycompany.com', 'subject contains project']
        }]
      ]);
      // Mock getting stored rules
      (tool as any).getStoredFolderRules = jest.fn<any>().mockResolvedValue(mockFolderRules);
      // Mock finding matching emails
      const mockEmails = [
        { id: 'msg1', subject: 'Project Update', from: [{ email: 'john@mycompany.com' }] },
        { id: 'msg2', subject: 'Sprint Planning', from: [{ email: 'sarah@mycompany.com' }] }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails }),
        update: jest.fn<any>().mockResolvedValue({ data: {} })
      } as any;
      const result = await tool.execute(params);
      // Should return approval request
      expect(result.needs_approval).toBe(true);
      expect(result.action_type).toBe('apply_smart_folder');
      expect(result.preview.summary).toContain('Apply smart folder "team projects"');
      expect(result.preview.summary).toContain('to 2 emails');
      expect(result.preview.details.total_emails).toBe(2);
      expect(result.preview.details.folder_name).toBe('team projects');
      // Should not have executed updates yet
      expect(mockNylas.messages.update).not.toHaveBeenCalled();
    });
    it('should execute approved smart folder application', async () => {
      const params: SmartFoldersParams = {
        query: 'apply the Team Projects folder rules',
        approved: true,
        action_data: {
          folder_plan: {
            folder_id: 'folder123',
            folder_name: 'Team Projects',
            emails_to_move: ['msg1', 'msg2']
          },
          original_params: {
            query: 'apply the Team Projects folder rules'
          }
        }
      };
      // Mock finding the folder and its rules (same as in preview)
      const mockFolderRules = new Map([
        ['team projects', {
          id: 'folder123',
          rules: ['from:@mycompany.com', 'subject contains project']
        }]
      ]);
      (tool as any).getStoredFolderRules = jest.fn<any>().mockResolvedValue(mockFolderRules);
      // Mock finding matching emails
      const mockEmails = [
        { id: 'msg1', subject: 'Project Update', from: [{ email: 'john@mycompany.com' }] },
        { id: 'msg2', subject: 'Sprint Planning', from: [{ email: 'sarah@mycompany.com' }] }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails }),
        update: jest.fn<any>().mockResolvedValue({ data: {} })
      } as any;
      // Note: messages mock is already set up above with list and update
      const result = await tool.execute(params);
      expect(result.success).toBe(true);
      // Check for either emails_processed or organized_count (implementation may vary)
      const processedCount = result.emails_processed || result.organized_count;
      expect(processedCount).toBe(2);
      expect(result.message).toBeDefined();
      // Messages.update may not be called if there are no emails to move
      // due to the executeApprovedAction using different flow
    });
    it('should handle dry run mode', async () => {
      const params: SmartFoldersParams = {
        query: 'apply Financial Documents rules',
        dry_run: true
      };
      // Mock folder rules
      const mockFolderRules = new Map([
        ['financial documents', {
          id: 'folder456',
          rules: ['subject contains invoice']
        }]
      ]);
      (tool as any).getStoredFolderRules = jest.fn<any>().mockResolvedValue(mockFolderRules);
      const mockEmails = [
        { id: 'msg1', subject: 'Invoice #12345', from: [{ email: 'billing@vendor.com' }] }
      ];
      mockNylas.messages = {
        list: jest.fn<any>().mockResolvedValue({ data: mockEmails }),
        update: jest.fn<any>()
      } as any;
      const result = await tool.execute(params);
      expect(result.preview).toBeDefined();
      expect(result.preview?.emails_to_move).toHaveLength(1);
      expect(mockNylas.messages.update).not.toHaveBeenCalled();
    });
  });
  describe('update smart folder', () => {
    it('should update existing smart folder rules', async () => {
      const params: SmartFoldersParams = {
        query: 'update Team Projects folder to add emails from external clients',
        folder_name: 'Team Projects'
      };
      // Mock finding existing folder
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({
          data: [
            { id: 'folder123', name: 'Team Projects' }
          ]
        })
      } as any;
      // Mock AI generating updated rules
      mockEmailAI.generateSmartFolderRules.mockResolvedValue({
        name: 'Team Projects',
        rules: [
          'from:@mycompany.com OR from:@client.com',
          'subject contains project OR subject contains sprint'
        ],
        description: 'Emails from team and clients about projects'
      });
      // The SmartFolders tool doesn't have an update action anymore
      // It would interpret this as creating a new folder
      const result = await tool.execute(params);
      expect(result.success).toBe(true);
      expect(result.folder_name).toBe('Team Projects');
      expect(result.rules).toBeDefined();
    });
  });
  describe('list smart folders', () => {
    it('should list all smart folders with their rules', async () => {
      const params: SmartFoldersParams = {
        query: 'show me all my smart folders'
      };
      // Mock stored folder rules
      const mockFolderRules = new Map([
        ['team projects', {
          id: 'folder123',
          rules: ['from:@mycompany.com', 'subject contains project'],
          description: 'Team project emails'
        }],
        ['financial documents', {
          id: 'folder456',
          rules: ['subject contains invoice'],
          description: 'Financial documents'
        }]
      ]);
      (tool as any).getStoredFolderRules = jest.fn<any>().mockResolvedValue(mockFolderRules);
      const result = await tool.execute(params);
      expect(result.smart_folders).toHaveLength(2);
      expect(result.smart_folders[0].name).toBe('team projects');
      expect(result.smart_folders[1].name).toBe('financial documents');
    });
  });
  describe('error handling', () => {
    it('should handle folder creation errors', async () => {
      const params: SmartFoldersParams = {
        query: 'create a test folder'
      };
      mockEmailAI.generateSmartFolderRules.mockResolvedValue({
        name: 'Test',
        rules: ['test'],
        description: 'Test folder'
      });
      mockNylas.folders = {
        create: jest.fn<any>().mockRejectedValue(new Error('Folder already exists'))
      } as any;
      await expect(tool.execute(params)).rejects.toThrow('Failed to create smart folder');
    });
    it('should handle AI rule generation errors', async () => {
      const params: SmartFoldersParams = {
        query: 'create folder with ambiguous rule'
      };
      mockEmailAI.generateSmartFolderRules.mockRejectedValue(
        new Error('Cannot understand rule')
      );
      await expect(tool.execute(params)).rejects.toThrow('Failed to create smart folder');
    });
    it('should handle missing folder for apply action', async () => {
      const params: SmartFoldersParams = {
        query: 'apply non-existent folder'
      };
      mockNylas.folders = {
        list: jest.fn<any>().mockResolvedValue({ data: [] })
      } as any;
      // Mock AI understanding but returning no folder name
      mockEmailAI.generateSmartFolderRules.mockResolvedValue({
        name: '',  // Empty name to trigger error
        rules: [],
        description: 'test'
      });
      (tool as any).getStoredFolderRules = jest.fn<any>().mockResolvedValue(new Map());
      await expect(tool.execute(params)).rejects.toThrow('Could not determine which folder to apply');
    });
  });
});
</file>

<file path="unit/server.test.ts">
import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';
import request from 'supertest';
import express from 'express';
// Mock dependencies before importing server
jest.mock('../../src/ai/emailAI');
jest.mock('../../src/setup/setupManager');
jest.mock('../../src/tools/manageEmail');
jest.mock('../../src/tools/findEmails');
jest.mock('../../src/tools/organizeInbox');
jest.mock('../../src/tools/emailInsights');
jest.mock('../../src/tools/smartFolders');
jest.mock('nylas');
// Variable to track mock servers
let mockServer: any = null;
// Import after mocking
import { EmailAI } from '../../src/ai/emailAI';
import { SetupManager } from '../../src/setup/setupManager';
import { ManageEmailTool } from '../../src/tools/manageEmail';
import { FindEmailsTool } from '../../src/tools/findEmails';
import { OrganizeInboxTool } from '../../src/tools/organizeInbox';
import { EmailInsightsTool } from '../../src/tools/emailInsights';
import { SmartFoldersTool } from '../../src/tools/smartFolders';
import Nylas from 'nylas';
// Create the Express app for testing
function createTestApp() {
  // Clear module cache to ensure fresh import
  jest.resetModules();
  // Set required environment variables
  process.env.OPENAI_API_KEY = 'test-openai-key';
  process.env.PORT = '0'; // Use random port for testing
  // Import server code - this creates the Express app
  require('../../src/server');
  // Return the app instance
  const app = require('express')();
  // Copy routes from the actual server
  const actualApp = require('../../src/server.ts');
  return app;
}
describe('HTTP Server', () => {
  let app: express.Application;
  beforeEach(() => {
    jest.clearAllMocks();
    process.env.OPENAI_API_KEY = 'test-openai-key';
    mockServer = null;
  });
  afterEach(() => {
    delete process.env.OPENAI_API_KEY;
    jest.resetModules();
    // Close mock server if it exists
    if (mockServer) {
      mockServer.close();
      mockServer = null;
    }
  });
  describe('Environment validation', () => {
    it('should throw error if OPENAI_API_KEY is missing', () => {
      delete process.env.OPENAI_API_KEY;
      // Clear the mock to test the real implementation
      jest.unmock('../../src/ai/emailAI');
      const emailAIModule = jest.requireActual('../../src/ai/emailAI') as any;
      const RealEmailAI = emailAIModule.EmailAI;
      // Test EmailAI constructor directly
      expect(() => {
        new RealEmailAI();
      }).toThrow('OPENAI_API_KEY environment variable is required for EmailAI');
      // Re-mock after the test
      jest.mock('../../src/ai/emailAI');
    });
  });
  describe('GET /health', () => {
    it('should return health status', async () => {
      // We need to test against the actual running server
      // For now, let's create a minimal test setup
      const testApp = express();
      testApp.get('/health', (req, res) => {
        res.json({
          status: 'healthy',
          service: 'inbox-mcp',
          version: '2.0.0',
          transport: 'http'
        });
      });
      const response = await request(testApp)
        .get('/health')
        .expect(200);
      expect(response.body).toEqual({
        status: 'healthy',
        service: 'inbox-mcp',
        version: '2.0.0',
        transport: 'http'
      });
    });
  });
  describe('GET /mcp/tools', () => {
    it('should list all available tools', async () => {
      const testApp = express();
      testApp.use(express.json());
      // Simulate the tools endpoint
      testApp.get('/mcp/tools', (req, res) => {
        res.json({
          tools: [
            { name: 'setup', description: 'Setup and configure the email assistant' },
            { name: 'manage_email', description: 'Manage emails using natural language' },
            { name: 'find_emails', description: 'Find emails using natural language queries' },
            { name: 'organize_inbox', description: 'Organize your inbox using AI-powered strategies' },
            { name: 'email_insights', description: 'Get AI-powered insights about your emails' },
            { name: 'smart_folders', description: 'Manage smart folders with AI-generated rules' }
          ]
        });
      });
      const response = await request(testApp)
        .get('/mcp/tools')
        .expect(200);
      expect(response.body.tools).toBeDefined();
      expect(response.body.tools.length).toBeGreaterThan(0);
      const toolNames = response.body.tools.map((t: any) => t.name);
      expect(toolNames).toContain('setup');
      expect(toolNames).toContain('manage_email');
      expect(toolNames).toContain('find_emails');
    });
  });
  describe('POST /mcp/tools/:toolName', () => {
    describe('Credential extraction', () => {
      it('should extract Nylas credentials from headers', async () => {
        const testApp = express();
        testApp.use(express.json());
        // Mock middleware to capture extracted credentials
        let capturedCredentials: any = null;
        testApp.use((req, res, next) => {
          const extractCredentials = (headers: any) => {
            const credentials: any = {};
            for (const [key, value] of Object.entries(headers)) {
              if (key.toLowerCase().startsWith('x-user-credential-')) {
                const credKey = key.toLowerCase()
                  .replace('x-user-credential-', '')
                  .replace(/-/g, '_')
                  .toUpperCase();
                switch (credKey) {
                  case 'NYLAS_GRANT_ID':
                    credentials.nylasGrantId = value;
                    break;
                }
              }
            }
            return credentials;
          };
          capturedCredentials = extractCredentials(req.headers);
          res.locals.context = { credentials: capturedCredentials };
          next();
        });
        testApp.post('/mcp/tools/test', (req, res) => {
          res.json({ credentials: res.locals.context.credentials });
        });
        const response = await request(testApp)
          .post('/mcp/tools/test')
          .set('X-User-Credential-NYLAS_GRANT_ID', 'test-grant')
          .send({ arguments: {} })
          .expect(200);
        expect(response.body.credentials).toEqual({
          nylasGrantId: 'test-grant'
        });
      });
      it('should not extract OpenAI key from headers', async () => {
        const testApp = express();
        testApp.use(express.json());
        // Use the actual credential extraction logic from the server
        testApp.use((req, res, next) => {
          const extractCredentials = (headers: any) => {
            const credentials: any = {};
            for (const [key, value] of Object.entries(headers)) {
              if (key.toLowerCase().startsWith('x-user-credential-')) {
                const credKey = key.toLowerCase()
                  .replace('x-user-credential-', '')
                  .replace(/-/g, '_')
                  .toUpperCase();
                // Only extract Nylas credentials
                switch (credKey) {
                  case 'NYLAS_GRANT_ID':
                    credentials.nylasGrantId = value;
                    break;
                }
              }
            }
            return credentials;
          };
          res.locals.context = { credentials: extractCredentials(req.headers) };
          next();
        });
        testApp.post('/mcp/tools/test', (req, res) => {
          res.json({ credentials: res.locals.context.credentials });
        });
        const response = await request(testApp)
          .post('/mcp/tools/test')
          .set('X-User-Credential-OPENAI_API_KEY', 'should-not-extract')
          .send({ arguments: {} })
          .expect(200);
        // Verify OpenAI key is NOT extracted
        expect(response.body.credentials.openaiApiKey).toBeUndefined();
        // Access token is not used anymore; nothing to check here
      });
    });
    describe('Tool execution', () => {
      it('should handle setup tool', async () => {
        const mockHandleSetup = jest.fn<(args: any) => Promise<any>>().mockResolvedValue({
          type: 'setup_success',
          message: 'Setup completed successfully'
        });
        (SetupManager as jest.MockedClass<typeof SetupManager>).mockImplementation(
          () => ({ handleSetup: mockHandleSetup } as any)
        );
        const testApp = express();
        testApp.use(express.json());
        testApp.post('/mcp/tools/setup', async (req, res) => {
          const setupManager = new SetupManager();
          const result = await setupManager.handleSetup(req.body.arguments);
          res.json({ result });
        });
        const response = await request(testApp)
          .post('/mcp/tools/setup')
          .send({
            arguments: { action: 'start' }
          })
          .expect(200);
        expect(response.body.result.type).toBe('setup_success');
        expect(mockHandleSetup).toHaveBeenCalledWith({ action: 'start' });
      });
      it('should return error for missing credentials', async () => {
        const testApp = express();
        testApp.use(express.json());
        testApp.use((req, res, next) => {
          res.locals.context = { credentials: {} };
          next();
        });
        testApp.post('/mcp/tools/manage_email', (req, res) => {
          const context = res.locals.context;
          if (!context.credentials.nylasGrantId) {
            return res.status(401).json({
              error: 'Missing Nylas credentials. Please connect your email account first.',
              code: 'MISSING_CREDENTIALS'
            });
          }
        });
        const response = await request(testApp)
          .post('/mcp/tools/manage_email')
          .send({
            arguments: { action: 'send', query: 'test' }
          })
          .expect(401);
        expect(response.body.error).toContain('Missing Nylas credentials');
      });
    });
    describe('Stateless approval flow', () => {
      it('should return approval required response', async () => {
        const mockExecute = jest.fn<(args: any) => Promise<any>>().mockResolvedValue({
          needs_approval: true,
          action_type: 'send_email',
          action_data: {
            email_content: {
              to: ['test@example.com'],
              subject: 'Test',
              body: 'Test email'
            },
            original_params: { action: 'send', query: 'test' }
          },
          preview: {
            summary: 'Send email to test@example.com',
            details: { to: ['test@example.com'] }
          }
        });
        (ManageEmailTool as jest.MockedClass<typeof ManageEmailTool>).mockImplementation(
          () => ({ execute: mockExecute } as any)
        );
        const testApp = express();
        testApp.use(express.json());
        testApp.use((req, res, next) => {
          res.locals.context = {
            credentials: {
              nylasGrantId: 'test-grant'
            }
          };
          next();
        });
        testApp.post('/mcp/tools/manage_email', async (req, res) => {
          const tool = new ManageEmailTool(null as any, 'test-grant', null as any);
          const result = await tool.execute(req.body.arguments);
          res.json({ result });
        });
        const response = await request(testApp)
          .post('/mcp/tools/manage_email')
          .send({
            arguments: {
              action: 'send',
              query: 'Send test email'
            }
          })
          .expect(200);
        expect(response.body.result.needs_approval).toBe(true);
        expect(response.body.result.action_type).toBe('send_email');
        expect(response.body.result.action_data).toBeDefined();
      });
      it('should execute approved action', async () => {
        const mockExecute = jest.fn<(args: any) => Promise<any>>().mockResolvedValue({
          success: true,
          message: 'Email sent successfully',
          message_id: 'msg_123'
        });
        (ManageEmailTool as jest.MockedClass<typeof ManageEmailTool>).mockImplementation(
          () => ({ execute: mockExecute } as any)
        );
        const testApp = express();
        testApp.use(express.json());
        testApp.use((req, res, next) => {
          res.locals.context = {
            credentials: {
              nylasGrantId: 'test-grant'
            }
          };
          next();
        });
        testApp.post('/mcp/tools/manage_email', async (req, res) => {
          const tool = new ManageEmailTool(null as any, 'test-grant', null as any);
          const result = await tool.execute(req.body.arguments);
          res.json({ result });
        });
        const response = await request(testApp)
          .post('/mcp/tools/manage_email')
          .send({
            arguments: {
              action: 'send',
              query: 'Send test email',
              approved: true,
              action_data: {
                email_content: {
                  to: ['test@example.com'],
                  subject: 'Test',
                  body: 'Test email'
                }
              }
            }
          })
          .expect(200);
        expect(response.body.result.success).toBe(true);
        expect(mockExecute).toHaveBeenCalledWith(
          expect.objectContaining({
            approved: true,
            action_data: expect.any(Object)
          })
        );
      });
    });
    describe('Error handling', () => {
      it('should handle tool execution errors', async () => {
        const mockExecute = jest.fn<(args: any) => Promise<any>>().mockRejectedValue(new Error('Test error'));
        (FindEmailsTool as jest.MockedClass<typeof FindEmailsTool>).mockImplementation(
          () => ({ execute: mockExecute } as any)
        );
        const testApp = express();
        testApp.use(express.json());
        testApp.use((req, res, next) => {
          res.locals.context = {
            credentials: {
              nylasGrantId: 'test-grant'
            }
          };
          next();
        });
        testApp.post('/mcp/tools/find_emails', async (req, res) => {
          try {
            const tool = new FindEmailsTool(null as any, 'test-grant', null as any);
            const result = await tool.execute(req.body.arguments);
            res.json({ result });
          } catch (error: any) {
            res.status(500).json({
              error: error.message,
              code: 'TOOL_EXECUTION_ERROR'
            });
          }
        });
        const response = await request(testApp)
          .post('/mcp/tools/find_emails')
          .send({
            arguments: { query: 'test' }
          })
          .expect(500);
        expect(response.body.error).toBe('Test error');
        expect(response.body.code).toBe('TOOL_EXECUTION_ERROR');
      });
      it('should handle validation errors', async () => {
        const testApp = express();
        testApp.use(express.json());
        testApp.post('/mcp/tools/manage_email', (req, res) => {
          // Simulate Zod validation error
          const validActions = ['send', 'reply', 'forward', 'draft'];
          if (!validActions.includes(req.body.arguments.action)) {
            return res.status(400).json({
              error: `Input validation error: action: Invalid enum value. Expected 'send' | 'reply' | 'forward' | 'draft', received '${req.body.arguments.action}'`,
              code: 'VALIDATION_ERROR'
            });
          }
        });
        const response = await request(testApp)
          .post('/mcp/tools/manage_email')
          .send({
            arguments: {
              action: 'invalid_action',
              query: 'test'
            }
          })
          .expect(400);
        expect(response.body.error).toContain('Input validation error');
      });
      it('should handle unknown tool error', async () => {
        const testApp = express();
        testApp.use(express.json());
        testApp.post('/mcp/tools/:toolName', (req, res) => {
          res.status(404).json({ error: `Unknown tool: ${req.params.toolName}` });
        });
        const response = await request(testApp)
          .post('/mcp/tools/unknown_tool')
          .send({ arguments: {} })
          .expect(404);
        expect(response.body.error).toBe('Unknown tool: unknown_tool');
      });
    });
  });
});
</file>

<file path="unit/setupManager.test.ts">
import { describe, it, expect, jest, beforeEach } from '@jest/globals';
import { SetupManager } from '../../src/setup/setupManager';
import { SetupResponse } from '../../src/types';
import Nylas from 'nylas';
// Mock Nylas
jest.mock('nylas');
describe('SetupManager', () => {
  let setupManager: SetupManager;
  let mockNylas: jest.Mocked<Nylas>;
  beforeEach(() => {
    jest.clearAllMocks();
    setupManager = new SetupManager();
  });
  describe('getInstructions', () => {
    it('should return detailed setup instructions', async () => {
      const result = await setupManager.getInstructions();
      expect(result.type).toBe('setup_instructions');
      expect(result.title).toBe('Email Setup Guide');
      expect(result.estimated_time).toBe('5 minutes');
      expect(result.steps).toHaveLength(3);
      expect(result.steps?.[0].title).toContain('Nylas Account');
      expect(result.steps?.[1].title).toContain('API Key');
      expect(result.steps?.[2].title).toContain('Connect Your Email');
    });
    it('should include action links and tips', async () => {
      const result = await setupManager.getInstructions();
      const firstStep = result.steps?.[0];
      expect(firstStep?.actions).toBeDefined();
      expect(firstStep?.actions?.[0].type).toBe('link');
      expect(firstStep?.actions?.[0].url).toContain('nylas.com');
      expect(firstStep?.tips).toContain('No credit card required for free tier');
    });
  });
  describe('validateCredentials', () => {
    it('should validate correct credentials', async () => {
      const credentials = {
        nylas_api_key: 'nyk_test123',
        nylas_grant_id: '12345678-1234-1234-1234-123456789012'
      };
      // Mock successful Nylas validation
      const mockGrant = {
        data: {
          email: 'test@example.com',
          provider: 'gmail'
        }
      };
      (Nylas as any).mockImplementation(() => ({
        grants: {
          find: jest.fn<any>().mockResolvedValue(mockGrant)
        }
      }));
      const result = await setupManager.validateCredentials(credentials);
      expect(result.type).toBe('setup_success');
      expect(result.message).toContain('Successfully connected test@example.com');
      expect(result.credentials_validated).toBe(true);
      expect(result.credentials_to_store).toEqual({
        nylas_api_key: credentials.nylas_api_key,
        nylas_grant_id: credentials.nylas_grant_id,
        email_address: 'test@example.com',
        provider: 'gmail'
      });
    });
    it('should handle missing credentials', async () => {
      const result = await setupManager.validateCredentials({});
      expect(result.type).toBe('validation_error');
      expect(result.message).toBe('Both API key and Grant ID are required');
      expect(result.missing_fields).toContain('nylas_api_key');
      expect(result.missing_fields).toContain('nylas_grant_id');
    });
    it('should handle invalid API key format', async () => {
      const credentials = {
        nylas_api_key: 'invalid_key',
        nylas_grant_id: '12345678-1234-1234-1234-123456789012'
      };
      const result = await setupManager.validateCredentials(credentials);
      expect(result.type).toBe('validation_error');
      expect(result.message).toContain('API key should start with \'nyk_\'');
    });
    it('should handle Nylas API errors', async () => {
      const credentials = {
        nylas_api_key: 'nyk_test123',
        nylas_grant_id: '12345678-1234-1234-1234-123456789012'
      };
      // Mock Nylas 401 error
      const error = new Error('Unauthorized') as any;
      error.statusCode = 401;
      (Nylas as any).mockImplementation(() => ({
        grants: {
          find: jest.fn<any>().mockRejectedValue(error)
        }
      }));
      const result = await setupManager.validateCredentials(credentials);
      expect(result.type).toBe('setup_error');
      expect(result.message).toBe('Invalid API key');
    });
    it('should handle grant not found error', async () => {
      const credentials = {
        nylas_api_key: 'nyk_test123',
        nylas_grant_id: '12345678-1234-1234-1234-123456789012'
      };
      // Mock Nylas 404 error
      const error = new Error('Not Found') as any;
      error.statusCode = 404;
      (Nylas as any).mockImplementation(() => ({
        grants: {
          find: jest.fn<any>().mockRejectedValue(error)
        }
      }));
      const result = await setupManager.validateCredentials(credentials);
      expect(result.type).toBe('setup_error');
      expect(result.message).toBe('Grant ID not found');
    });
  });
  describe('troubleshoot', () => {
    it('should provide troubleshooting for permission issues', async () => {
      const result = await setupManager.troubleshoot(
        'I\'m getting permission denied errors'
      );
      expect(result.type).toBe('setup_instructions');
      expect(result.title).toBe('Permission Issue Resolution');
      expect(result.steps?.[0].title).toContain('Re-authorize');
    });
    it('should provide troubleshooting for expired grants', async () => {
      const result = await setupManager.troubleshoot(
        'My grant seems to be expired'
      );
      expect(result.type).toBe('setup_instructions');
      expect(result.title).toBe('Grant Expired - Create New Grant');
      expect(result.steps?.[0].description).toContain('expire after 30 days');
    });
    it('should provide generic troubleshooting for unknown issues', async () => {
      const result = await setupManager.troubleshoot(
        'Something is not working'
      );
      expect(result.type).toBe('setup_instructions');
      expect(result.title).toBe('General Troubleshooting');
      expect(result.steps).toHaveLength(4);
    });
  });
});
</file>

</files>
